// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: zbprotocol.proto

package zbprotocol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TableDataFormat int32

const (
	TableDataFormat_BINARY     TableDataFormat = 0
	TableDataFormat_PLAIN_TEXT TableDataFormat = 1
	TableDataFormat_JSON       TableDataFormat = 2
)

// Enum value maps for TableDataFormat.
var (
	TableDataFormat_name = map[int32]string{
		0: "BINARY",
		1: "PLAIN_TEXT",
		2: "JSON",
	}
	TableDataFormat_value = map[string]int32{
		"BINARY":     0,
		"PLAIN_TEXT": 1,
		"JSON":       2,
	}
)

func (x TableDataFormat) Enum() *TableDataFormat {
	p := new(TableDataFormat)
	*p = x
	return p
}

func (x TableDataFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableDataFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[0].Descriptor()
}

func (TableDataFormat) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[0]
}

func (x TableDataFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableDataFormat.Descriptor instead.
func (TableDataFormat) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{0}
}

type PermissionConstraintType int32

const (
	PermissionConstraintType_FIELD PermissionConstraintType = 0
)

// Enum value maps for PermissionConstraintType.
var (
	PermissionConstraintType_name = map[int32]string{
		0: "FIELD",
	}
	PermissionConstraintType_value = map[string]int32{
		"FIELD": 0,
	}
)

func (x PermissionConstraintType) Enum() *PermissionConstraintType {
	p := new(PermissionConstraintType)
	*p = x
	return p
}

func (x PermissionConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[1].Descriptor()
}

func (PermissionConstraintType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[1]
}

func (x PermissionConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionConstraintType.Descriptor instead.
func (PermissionConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{1}
}

type FieldConstraintType int32

const (
	FieldConstraintType_EQUALS_VALUE FieldConstraintType = 0
	FieldConstraintType_SET_VALUE    FieldConstraintType = 1
)

// Enum value maps for FieldConstraintType.
var (
	FieldConstraintType_name = map[int32]string{
		0: "EQUALS_VALUE",
		1: "SET_VALUE",
	}
	FieldConstraintType_value = map[string]int32{
		"EQUALS_VALUE": 0,
		"SET_VALUE":    1,
	}
)

func (x FieldConstraintType) Enum() *FieldConstraintType {
	p := new(FieldConstraintType)
	*p = x
	return p
}

func (x FieldConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[2].Descriptor()
}

func (FieldConstraintType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[2]
}

func (x FieldConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldConstraintType.Descriptor instead.
func (FieldConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{2}
}

type FieldConstraintValueType int32

const (
	FieldConstraintValueType_CONSTANT      FieldConstraintValueType = 0
	FieldConstraintValueType_UID           FieldConstraintValueType = 1
	FieldConstraintValueType_TIMESTAMP     FieldConstraintValueType = 2
	FieldConstraintValueType_NATURAL_ORDER FieldConstraintValueType = 3
	FieldConstraintValueType_RANDOM        FieldConstraintValueType = 4
)

// Enum value maps for FieldConstraintValueType.
var (
	FieldConstraintValueType_name = map[int32]string{
		0: "CONSTANT",
		1: "UID",
		2: "TIMESTAMP",
		3: "NATURAL_ORDER",
		4: "RANDOM",
	}
	FieldConstraintValueType_value = map[string]int32{
		"CONSTANT":      0,
		"UID":           1,
		"TIMESTAMP":     2,
		"NATURAL_ORDER": 3,
		"RANDOM":        4,
	}
)

func (x FieldConstraintValueType) Enum() *FieldConstraintValueType {
	p := new(FieldConstraintValueType)
	*p = x
	return p
}

func (x FieldConstraintValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldConstraintValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[3].Descriptor()
}

func (FieldConstraintValueType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[3]
}

func (x FieldConstraintValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldConstraintValueType.Descriptor instead.
func (FieldConstraintValueType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{3}
}

type PermissionAudienceType int32

const (
	PermissionAudienceType_INDIVIDUAL PermissionAudienceType = 0
	PermissionAudienceType_USER       PermissionAudienceType = 1
	PermissionAudienceType_PUBLIC     PermissionAudienceType = 2
)

// Enum value maps for PermissionAudienceType.
var (
	PermissionAudienceType_name = map[int32]string{
		0: "INDIVIDUAL",
		1: "USER",
		2: "PUBLIC",
	}
	PermissionAudienceType_value = map[string]int32{
		"INDIVIDUAL": 0,
		"USER":       1,
		"PUBLIC":     2,
	}
)

func (x PermissionAudienceType) Enum() *PermissionAudienceType {
	p := new(PermissionAudienceType)
	*p = x
	return p
}

func (x PermissionAudienceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionAudienceType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[4].Descriptor()
}

func (PermissionAudienceType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[4]
}

func (x PermissionAudienceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionAudienceType.Descriptor instead.
func (PermissionAudienceType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{4}
}

type PermissionLevel int32

const (
	PermissionLevel_NONE       PermissionLevel = 0
	PermissionLevel_READ       PermissionLevel = 1
	PermissionLevel_APPEND     PermissionLevel = 2
	PermissionLevel_DELETE     PermissionLevel = 3
	PermissionLevel_ADMINISTER PermissionLevel = 4
)

// Enum value maps for PermissionLevel.
var (
	PermissionLevel_name = map[int32]string{
		0: "NONE",
		1: "READ",
		2: "APPEND",
		3: "DELETE",
		4: "ADMINISTER",
	}
	PermissionLevel_value = map[string]int32{
		"NONE":       0,
		"READ":       1,
		"APPEND":     2,
		"DELETE":     3,
		"ADMINISTER": 4,
	}
)

func (x PermissionLevel) Enum() *PermissionLevel {
	p := new(PermissionLevel)
	*p = x
	return p
}

func (x PermissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[5].Descriptor()
}

func (PermissionLevel) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[5]
}

func (x PermissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionLevel.Descriptor instead.
func (PermissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{5}
}

type CredentialProofType int32

const (
	CredentialProofType_SIGNATURE CredentialProofType = 0
	CredentialProofType_JWT_TOKEN CredentialProofType = 1
)

// Enum value maps for CredentialProofType.
var (
	CredentialProofType_name = map[int32]string{
		0: "SIGNATURE",
		1: "JWT_TOKEN",
	}
	CredentialProofType_value = map[string]int32{
		"SIGNATURE": 0,
		"JWT_TOKEN": 1,
	}
)

func (x CredentialProofType) Enum() *CredentialProofType {
	p := new(CredentialProofType)
	*p = x
	return p
}

func (x CredentialProofType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialProofType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[6].Descriptor()
}

func (CredentialProofType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[6]
}

func (x CredentialProofType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialProofType.Descriptor instead.
func (CredentialProofType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{6}
}

type QueryOperator int32

const (
	QueryOperator_EQUALS          QueryOperator = 0
	QueryOperator_GREATER_THAN    QueryOperator = 1
	QueryOperator_LESS_THAN       QueryOperator = 2
	QueryOperator_NOT_EQUALS      QueryOperator = 3
	QueryOperator_GREATER_THAN_EQ QueryOperator = 4
	QueryOperator_LESS_THAN_EQ    QueryOperator = 5
	QueryOperator_TEXT_SEARCH     QueryOperator = 6
)

// Enum value maps for QueryOperator.
var (
	QueryOperator_name = map[int32]string{
		0: "EQUALS",
		1: "GREATER_THAN",
		2: "LESS_THAN",
		3: "NOT_EQUALS",
		4: "GREATER_THAN_EQ",
		5: "LESS_THAN_EQ",
		6: "TEXT_SEARCH",
	}
	QueryOperator_value = map[string]int32{
		"EQUALS":          0,
		"GREATER_THAN":    1,
		"LESS_THAN":       2,
		"NOT_EQUALS":      3,
		"GREATER_THAN_EQ": 4,
		"LESS_THAN_EQ":    5,
		"TEXT_SEARCH":     6,
	}
)

func (x QueryOperator) Enum() *QueryOperator {
	p := new(QueryOperator)
	*p = x
	return p
}

func (x QueryOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[7].Descriptor()
}

func (QueryOperator) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[7]
}

func (x QueryOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOperator.Descriptor instead.
func (QueryOperator) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{7}
}

type QueryLogicalOperator int32

const (
	QueryLogicalOperator_LOGICAL_OR  QueryLogicalOperator = 0
	QueryLogicalOperator_LOGICAL_AND QueryLogicalOperator = 1
)

// Enum value maps for QueryLogicalOperator.
var (
	QueryLogicalOperator_name = map[int32]string{
		0: "LOGICAL_OR",
		1: "LOGICAL_AND",
	}
	QueryLogicalOperator_value = map[string]int32{
		"LOGICAL_OR":  0,
		"LOGICAL_AND": 1,
	}
)

func (x QueryLogicalOperator) Enum() *QueryLogicalOperator {
	p := new(QueryLogicalOperator)
	*p = x
	return p
}

func (x QueryLogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryLogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[8].Descriptor()
}

func (QueryLogicalOperator) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[8]
}

func (x QueryLogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryLogicalOperator.Descriptor instead.
func (QueryLogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{8}
}

type QueryOrdering int32

const (
	QueryOrdering_LEXICOGRAPHIC    QueryOrdering = 0
	QueryOrdering_REAL_NUMBERS     QueryOrdering = 1
	QueryOrdering_INTEGRAL_NUMBERS QueryOrdering = 2
	QueryOrdering_FULL_TEXT        QueryOrdering = 3
)

// Enum value maps for QueryOrdering.
var (
	QueryOrdering_name = map[int32]string{
		0: "LEXICOGRAPHIC",
		1: "REAL_NUMBERS",
		2: "INTEGRAL_NUMBERS",
		3: "FULL_TEXT",
	}
	QueryOrdering_value = map[string]int32{
		"LEXICOGRAPHIC":    0,
		"REAL_NUMBERS":     1,
		"INTEGRAL_NUMBERS": 2,
		"FULL_TEXT":        3,
	}
)

func (x QueryOrdering) Enum() *QueryOrdering {
	p := new(QueryOrdering)
	*p = x
	return p
}

func (x QueryOrdering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOrdering) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[9].Descriptor()
}

func (QueryOrdering) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[9]
}

func (x QueryOrdering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOrdering.Descriptor instead.
func (QueryOrdering) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{9}
}

type SystemObjectType int32

const (
	SystemObjectType_SUBUSER SystemObjectType = 0
	SystemObjectType_TABLE   SystemObjectType = 1
	SystemObjectType_KEY     SystemObjectType = 2
)

// Enum value maps for SystemObjectType.
var (
	SystemObjectType_name = map[int32]string{
		0: "SUBUSER",
		1: "TABLE",
		2: "KEY",
	}
	SystemObjectType_value = map[string]int32{
		"SUBUSER": 0,
		"TABLE":   1,
		"KEY":     2,
	}
)

func (x SystemObjectType) Enum() *SystemObjectType {
	p := new(SystemObjectType)
	*p = x
	return p
}

func (x SystemObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_zbprotocol_proto_enumTypes[10].Descriptor()
}

func (SystemObjectType) Type() protoreflect.EnumType {
	return &file_zbprotocol_proto_enumTypes[10]
}

func (x SystemObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemObjectType.Descriptor instead.
func (SystemObjectType) EnumDescriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{10}
}

type EcdsaSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R string `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S string `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *EcdsaSignature) Reset() {
	*x = EcdsaSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdsaSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdsaSignature) ProtoMessage() {}

func (x *EcdsaSignature) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdsaSignature.ProtoReflect.Descriptor instead.
func (*EcdsaSignature) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{0}
}

func (x *EcdsaSignature) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *EcdsaSignature) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type ProofOfCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredType  CredentialProofType `protobuf:"varint,1,opt,name=credType,proto3,enum=zbprotocol.CredentialProofType" json:"credType,omitempty"`
	Signature *EcdsaSignature     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	JwtToken  string              `protobuf:"bytes,3,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
}

func (x *ProofOfCredential) Reset() {
	*x = ProofOfCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfCredential) ProtoMessage() {}

func (x *ProofOfCredential) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfCredential.ProtoReflect.Descriptor instead.
func (*ProofOfCredential) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{1}
}

func (x *ProofOfCredential) GetCredType() CredentialProofType {
	if x != nil {
		return x.CredType
	}
	return CredentialProofType_SIGNATURE
}

func (x *ProofOfCredential) GetSignature() *EcdsaSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ProofOfCredential) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

type ZbEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ZbEmpty) Reset() {
	*x = ZbEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZbEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZbEmpty) ProtoMessage() {}

func (x *ZbEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZbEmpty.ProtoReflect.Descriptor instead.
func (*ZbEmpty) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{2}
}

type ZbError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ZbError) Reset() {
	*x = ZbError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZbError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZbError) ProtoMessage() {}

func (x *ZbError) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZbError.ProtoReflect.Descriptor instead.
func (*ZbError) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{3}
}

func (x *ZbError) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ZbError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VersionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion    string `protobuf:"bytes,1,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	ClientVersion    string `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	MinClientVersion string `protobuf:"bytes,3,opt,name=minClientVersion,proto3" json:"minClientVersion,omitempty"`
}

func (x *VersionDetails) Reset() {
	*x = VersionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionDetails) ProtoMessage() {}

func (x *VersionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionDetails.ProtoReflect.Descriptor instead.
func (*VersionDetails) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{4}
}

func (x *VersionDetails) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *VersionDetails) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *VersionDetails) GetMinClientVersion() string {
	if x != nil {
		return x.MinClientVersion
	}
	return ""
}

type FieldConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintType FieldConstraintType      `protobuf:"varint,1,opt,name=constraintType,proto3,enum=zbprotocol.FieldConstraintType" json:"constraintType,omitempty"`
	FieldKey       string                   `protobuf:"bytes,2,opt,name=fieldKey,proto3" json:"fieldKey,omitempty"`
	ValueType      FieldConstraintValueType `protobuf:"varint,3,opt,name=valueType,proto3,enum=zbprotocol.FieldConstraintValueType" json:"valueType,omitempty"`
	RequiredValue  string                   `protobuf:"bytes,4,opt,name=requiredValue,proto3" json:"requiredValue,omitempty"`
}

func (x *FieldConstraint) Reset() {
	*x = FieldConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConstraint) ProtoMessage() {}

func (x *FieldConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConstraint.ProtoReflect.Descriptor instead.
func (*FieldConstraint) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{5}
}

func (x *FieldConstraint) GetConstraintType() FieldConstraintType {
	if x != nil {
		return x.ConstraintType
	}
	return FieldConstraintType_EQUALS_VALUE
}

func (x *FieldConstraint) GetFieldKey() string {
	if x != nil {
		return x.FieldKey
	}
	return ""
}

func (x *FieldConstraint) GetValueType() FieldConstraintValueType {
	if x != nil {
		return x.ValueType
	}
	return FieldConstraintValueType_CONSTANT
}

func (x *FieldConstraint) GetRequiredValue() string {
	if x != nil {
		return x.RequiredValue
	}
	return ""
}

type PermissionConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintType  PermissionConstraintType `protobuf:"varint,1,opt,name=constraintType,proto3,enum=zbprotocol.PermissionConstraintType" json:"constraintType,omitempty"`
	FieldConstraint *FieldConstraint         `protobuf:"bytes,2,opt,name=fieldConstraint,proto3" json:"fieldConstraint,omitempty"`
}

func (x *PermissionConstraint) Reset() {
	*x = PermissionConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionConstraint) ProtoMessage() {}

func (x *PermissionConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionConstraint.ProtoReflect.Descriptor instead.
func (*PermissionConstraint) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{6}
}

func (x *PermissionConstraint) GetConstraintType() PermissionConstraintType {
	if x != nil {
		return x.ConstraintType
	}
	return PermissionConstraintType_FIELD
}

func (x *PermissionConstraint) GetFieldConstraint() *FieldConstraint {
	if x != nil {
		return x.FieldConstraint
	}
	return nil
}

type PermissionsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableId      string                  `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	AudienceType PermissionAudienceType  `protobuf:"varint,3,opt,name=audienceType,proto3,enum=zbprotocol.PermissionAudienceType" json:"audienceType,omitempty"`
	AudienceId   string                  `protobuf:"bytes,4,opt,name=audienceId,proto3" json:"audienceId,omitempty"`
	Level        PermissionLevel         `protobuf:"varint,5,opt,name=level,proto3,enum=zbprotocol.PermissionLevel" json:"level,omitempty"`
	Nonce        int64                   `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential      `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
	Constraints  []*PermissionConstraint `protobuf:"bytes,8,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *PermissionsEntry) Reset() {
	*x = PermissionsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsEntry) ProtoMessage() {}

func (x *PermissionsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsEntry.ProtoReflect.Descriptor instead.
func (*PermissionsEntry) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{7}
}

func (x *PermissionsEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermissionsEntry) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *PermissionsEntry) GetAudienceType() PermissionAudienceType {
	if x != nil {
		return x.AudienceType
	}
	return PermissionAudienceType_INDIVIDUAL
}

func (x *PermissionsEntry) GetAudienceId() string {
	if x != nil {
		return x.AudienceId
	}
	return ""
}

func (x *PermissionsEntry) GetLevel() PermissionLevel {
	if x != nil {
		return x.Level
	}
	return PermissionLevel_NONE
}

func (x *PermissionsEntry) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PermissionsEntry) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *PermissionsEntry) GetConstraints() []*PermissionConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type AuthenticateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId   string             `protobuf:"bytes,1,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Handle     string             `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Password   string             `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Nonce      int64              `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential *ProofOfCredential `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *AuthenticateUser) Reset() {
	*x = AuthenticateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateUser) ProtoMessage() {}

func (x *AuthenticateUser) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateUser.ProtoReflect.Descriptor instead.
func (*AuthenticateUser) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{8}
}

func (x *AuthenticateUser) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AuthenticateUser) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *AuthenticateUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticateUser) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AuthenticateUser) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type AuthenticateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JwtToken string `protobuf:"bytes,2,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
}

func (x *AuthenticateUserResponse) Reset() {
	*x = AuthenticateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateUserResponse) ProtoMessage() {}

func (x *AuthenticateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateUserResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateUserResponse) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{9}
}

func (x *AuthenticateUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthenticateUserResponse) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

type NewSubIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email         string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Mobile        string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	LoginPassword string `protobuf:"bytes,5,opt,name=loginPassword,proto3" json:"loginPassword,omitempty"`
	PubKeyEncoded string `protobuf:"bytes,6,opt,name=pubKeyEncoded,proto3" json:"pubKeyEncoded,omitempty"`
	SignupCode    string `protobuf:"bytes,7,opt,name=signupCode,proto3" json:"signupCode,omitempty"`
	GroupId       string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *NewSubIdentityRequest) Reset() {
	*x = NewSubIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSubIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSubIdentityRequest) ProtoMessage() {}

func (x *NewSubIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSubIdentityRequest.ProtoReflect.Descriptor instead.
func (*NewSubIdentityRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{10}
}

func (x *NewSubIdentityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewSubIdentityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewSubIdentityRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NewSubIdentityRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *NewSubIdentityRequest) GetLoginPassword() string {
	if x != nil {
		return x.LoginPassword
	}
	return ""
}

func (x *NewSubIdentityRequest) GetPubKeyEncoded() string {
	if x != nil {
		return x.PubKeyEncoded
	}
	return ""
}

func (x *NewSubIdentityRequest) GetSignupCode() string {
	if x != nil {
		return x.SignupCode
	}
	return ""
}

func (x *NewSubIdentityRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type NewIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email         string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Mobile        string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	AdminPassword string `protobuf:"bytes,4,opt,name=adminPassword,proto3" json:"adminPassword,omitempty"`
	PubKeyEncoded string `protobuf:"bytes,5,opt,name=pubKeyEncoded,proto3" json:"pubKeyEncoded,omitempty"`
}

func (x *NewIdentityRequest) Reset() {
	*x = NewIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewIdentityRequest) ProtoMessage() {}

func (x *NewIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewIdentityRequest.ProtoReflect.Descriptor instead.
func (*NewIdentityRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{11}
}

func (x *NewIdentityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewIdentityRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NewIdentityRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *NewIdentityRequest) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *NewIdentityRequest) GetPubKeyEncoded() string {
	if x != nil {
		return x.PubKeyEncoded
	}
	return ""
}

type SubIdentityModify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubId       string             `protobuf:"bytes,2,opt,name=subId,proto3" json:"subId,omitempty"`
	NewName     string             `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName,omitempty"`
	NewEmail    string             `protobuf:"bytes,4,opt,name=newEmail,proto3" json:"newEmail,omitempty"`
	NewMobile   string             `protobuf:"bytes,5,opt,name=newMobile,proto3" json:"newMobile,omitempty"`
	NewPassword string             `protobuf:"bytes,6,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
	NewPubKey   string             `protobuf:"bytes,7,opt,name=newPubKey,proto3" json:"newPubKey,omitempty"`
	Nonce       int64              `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential  *ProofOfCredential `protobuf:"bytes,9,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *SubIdentityModify) Reset() {
	*x = SubIdentityModify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubIdentityModify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubIdentityModify) ProtoMessage() {}

func (x *SubIdentityModify) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubIdentityModify.ProtoReflect.Descriptor instead.
func (*SubIdentityModify) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{12}
}

func (x *SubIdentityModify) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubIdentityModify) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

func (x *SubIdentityModify) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *SubIdentityModify) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

func (x *SubIdentityModify) GetNewMobile() string {
	if x != nil {
		return x.NewMobile
	}
	return ""
}

func (x *SubIdentityModify) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *SubIdentityModify) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

func (x *SubIdentityModify) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SubIdentityModify) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type SubIdentitiesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubIdentities []*NewSubIdentityRequest `protobuf:"bytes,1,rep,name=subIdentities,proto3" json:"subIdentities,omitempty"`
}

func (x *SubIdentitiesList) Reset() {
	*x = SubIdentitiesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubIdentitiesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubIdentitiesList) ProtoMessage() {}

func (x *SubIdentitiesList) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubIdentitiesList.ProtoReflect.Descriptor instead.
func (*SubIdentitiesList) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{13}
}

func (x *SubIdentitiesList) GetSubIdentities() []*NewSubIdentityRequest {
	if x != nil {
		return x.SubIdentities
	}
	return nil
}

type NewIdentityConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId         string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	VerificationCode string `protobuf:"bytes,3,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
}

func (x *NewIdentityConfirm) Reset() {
	*x = NewIdentityConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewIdentityConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewIdentityConfirm) ProtoMessage() {}

func (x *NewIdentityConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewIdentityConfirm.ProtoReflect.Descriptor instead.
func (*NewIdentityConfirm) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{14}
}

func (x *NewIdentityConfirm) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewIdentityConfirm) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *NewIdentityConfirm) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type NewIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error *ZbError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *NewIdentityResponse) Reset() {
	*x = NewIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewIdentityResponse) ProtoMessage() {}

func (x *NewIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewIdentityResponse.ProtoReflect.Descriptor instead.
func (*NewIdentityResponse) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{15}
}

func (x *NewIdentityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewIdentityResponse) GetError() *ZbError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TableIndexField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string        `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Ordering     QueryOrdering `protobuf:"varint,2,opt,name=ordering,proto3,enum=zbprotocol.QueryOrdering" json:"ordering,omitempty"`
	LanguageCode string        `protobuf:"bytes,3,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
}

func (x *TableIndexField) Reset() {
	*x = TableIndexField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndexField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndexField) ProtoMessage() {}

func (x *TableIndexField) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndexField.ProtoReflect.Descriptor instead.
func (*TableIndexField) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{16}
}

func (x *TableIndexField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TableIndexField) GetOrdering() QueryOrdering {
	if x != nil {
		return x.Ordering
	}
	return QueryOrdering_LEXICOGRAPHIC
}

func (x *TableIndexField) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type TableIndexFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*TableIndexField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TableIndexFields) Reset() {
	*x = TableIndexFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndexFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndexFields) ProtoMessage() {}

func (x *TableIndexFields) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndexFields.ProtoReflect.Descriptor instead.
func (*TableIndexFields) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{17}
}

func (x *TableIndexFields) GetFields() []*TableIndexField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SimpleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nonce      int64              `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential *ProofOfCredential `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{18}
}

func (x *SimpleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SimpleRequest) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SimpleRequest) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type ListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableOwnerId string             `protobuf:"bytes,2,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	Nonce        int64              `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,4,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{19}
}

func (x *ListTablesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListTablesRequest) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *ListTablesRequest) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ListTablesRequest) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type ListTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            *ZbError       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	TableDefinitions []*TableCreate `protobuf:"bytes,2,rep,name=tableDefinitions,proto3" json:"tableDefinitions,omitempty"`
}

func (x *ListTablesResponse) Reset() {
	*x = ListTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponse) ProtoMessage() {}

func (x *ListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponse.ProtoReflect.Descriptor instead.
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{20}
}

func (x *ListTablesResponse) GetError() *ZbError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTablesResponse) GetTableDefinitions() []*TableCreate {
	if x != nil {
		return x.TableDefinitions
	}
	return nil
}

type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableId      string             `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	TableOwnerId string             `protobuf:"bytes,3,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	Pattern      string             `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Nonce        int64              `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	PageIndex    int64              `protobuf:"varint,6,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{21}
}

func (x *ListKeysRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListKeysRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ListKeysRequest) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *ListKeysRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ListKeysRequest) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ListKeysRequest) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ListKeysRequest) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type ListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      *ZbError        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Pagination *PaginationInfo `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Keys       []string        `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{22}
}

func (x *ListKeysResponse) GetError() *ZbError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListKeysResponse) GetPagination() *PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListKeysResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TableCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableId        string              `protobuf:"bytes,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	DataFormat     TableDataFormat     `protobuf:"varint,3,opt,name=dataFormat,proto3,enum=zbprotocol.TableDataFormat" json:"dataFormat,omitempty"`
	Indices        *TableIndexFields   `protobuf:"bytes,4,opt,name=indices,proto3" json:"indices,omitempty"`
	Nonce          int64               `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	AllowTokenAuth bool                `protobuf:"varint,6,opt,name=allowTokenAuth,proto3" json:"allowTokenAuth,omitempty"`
	Credential     *ProofOfCredential  `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
	Permissions    []*PermissionsEntry `protobuf:"bytes,8,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *TableCreate) Reset() {
	*x = TableCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCreate) ProtoMessage() {}

func (x *TableCreate) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCreate.ProtoReflect.Descriptor instead.
func (*TableCreate) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{23}
}

func (x *TableCreate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableCreate) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableCreate) GetDataFormat() TableDataFormat {
	if x != nil {
		return x.DataFormat
	}
	return TableDataFormat_BINARY
}

func (x *TableCreate) GetIndices() *TableIndexFields {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *TableCreate) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TableCreate) GetAllowTokenAuth() bool {
	if x != nil {
		return x.AllowTokenAuth
	}
	return false
}

func (x *TableCreate) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *TableCreate) GetPermissions() []*PermissionsEntry {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type TablePutMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableOwnerId string             `protobuf:"bytes,2,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	TableId      string             `protobuf:"bytes,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Overwrite    bool               `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Nonce        int64              `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty"`
	Pairs        []*DataPair        `protobuf:"bytes,7,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *TablePutMulti) Reset() {
	*x = TablePutMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablePutMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePutMulti) ProtoMessage() {}

func (x *TablePutMulti) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePutMulti.ProtoReflect.Descriptor instead.
func (*TablePutMulti) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{24}
}

func (x *TablePutMulti) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TablePutMulti) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *TablePutMulti) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TablePutMulti) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *TablePutMulti) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TablePutMulti) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *TablePutMulti) GetPairs() []*DataPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type TablePut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableOwnerId string             `protobuf:"bytes,2,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	TableId      string             `protobuf:"bytes,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Key          string             `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value        []byte             `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Overwrite    bool               `protobuf:"varint,6,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Nonce        int64              `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,8,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *TablePut) Reset() {
	*x = TablePut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablePut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePut) ProtoMessage() {}

func (x *TablePut) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePut.ProtoReflect.Descriptor instead.
func (*TablePut) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{25}
}

func (x *TablePut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TablePut) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *TablePut) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TablePut) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TablePut) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TablePut) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *TablePut) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TablePut) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type TableGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableOwnerId string             `protobuf:"bytes,2,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	TableId      string             `protobuf:"bytes,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Nonce        int64              `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
	PageIndex    int64              `protobuf:"varint,6,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	Keys         []string           `protobuf:"bytes,7,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TableGet) Reset() {
	*x = TableGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGet) ProtoMessage() {}

func (x *TableGet) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGet.ProtoReflect.Descriptor instead.
func (*TableGet) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{26}
}

func (x *TableGet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableGet) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *TableGet) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableGet) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TableGet) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *TableGet) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *TableGet) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PaginationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex     int64 `protobuf:"varint,1,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	NextPageIndex int64 `protobuf:"varint,2,opt,name=nextPageIndex,proto3" json:"nextPageIndex,omitempty"`
	HasNextPage   bool  `protobuf:"varint,3,opt,name=hasNextPage,proto3" json:"hasNextPage,omitempty"`
}

func (x *PaginationInfo) Reset() {
	*x = PaginationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationInfo) ProtoMessage() {}

func (x *PaginationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationInfo.ProtoReflect.Descriptor instead.
func (*PaginationInfo) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{27}
}

func (x *PaginationInfo) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PaginationInfo) GetNextPageIndex() int64 {
	if x != nil {
		return x.NextPageIndex
	}
	return 0
}

func (x *PaginationInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

type DataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataPair) Reset() {
	*x = DataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPair) ProtoMessage() {}

func (x *DataPair) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPair.ProtoReflect.Descriptor instead.
func (*DataPair) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{28}
}

func (x *DataPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TableGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      *ZbError        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Pagination *PaginationInfo `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data       []*DataPair     `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TableGetResponse) Reset() {
	*x = TableGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGetResponse) ProtoMessage() {}

func (x *TableGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGetResponse.ProtoReflect.Descriptor instead.
func (*TableGetResponse) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{29}
}

func (x *TableGetResponse) GetError() *ZbError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TableGetResponse) GetPagination() *PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *TableGetResponse) GetData() []*DataPair {
	if x != nil {
		return x.Data
	}
	return nil
}

type TableSubqueryComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       QueryOperator `protobuf:"varint,1,opt,name=op,proto3,enum=zbprotocol.QueryOperator" json:"op,omitempty"`
	Field    string        `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value    string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Ordering QueryOrdering `protobuf:"varint,4,opt,name=ordering,proto3,enum=zbprotocol.QueryOrdering" json:"ordering,omitempty"`
}

func (x *TableSubqueryComparison) Reset() {
	*x = TableSubqueryComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSubqueryComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSubqueryComparison) ProtoMessage() {}

func (x *TableSubqueryComparison) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSubqueryComparison.ProtoReflect.Descriptor instead.
func (*TableSubqueryComparison) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{30}
}

func (x *TableSubqueryComparison) GetOp() QueryOperator {
	if x != nil {
		return x.Op
	}
	return QueryOperator_EQUALS
}

func (x *TableSubqueryComparison) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TableSubqueryComparison) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TableSubqueryComparison) GetOrdering() QueryOrdering {
	if x != nil {
		return x.Ordering
	}
	return QueryOrdering_LEXICOGRAPHIC
}

type TableQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableOwnerId string             `protobuf:"bytes,2,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	TableId      string             `protobuf:"bytes,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	Query        *TableSubQuery     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Nonce        int64              `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	PageIndex    int64              `protobuf:"varint,6,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *TableQuery) Reset() {
	*x = TableQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableQuery) ProtoMessage() {}

func (x *TableQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableQuery.ProtoReflect.Descriptor instead.
func (*TableQuery) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{31}
}

func (x *TableQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableQuery) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *TableQuery) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableQuery) GetQuery() *TableSubQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TableQuery) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TableQuery) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *TableQuery) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type TableSubQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCompound       bool                     `protobuf:"varint,1,opt,name=isCompound,proto3" json:"isCompound,omitempty"`
	CompoundOperator QueryLogicalOperator     `protobuf:"varint,2,opt,name=compoundOperator,proto3,enum=zbprotocol.QueryLogicalOperator" json:"compoundOperator,omitempty"`
	CompoundLeft     *TableSubQuery           `protobuf:"bytes,3,opt,name=compoundLeft,proto3" json:"compoundLeft,omitempty"`
	CompoundRight    *TableSubQuery           `protobuf:"bytes,4,opt,name=compoundRight,proto3" json:"compoundRight,omitempty"`
	Comparison       *TableSubqueryComparison `protobuf:"bytes,5,opt,name=comparison,proto3" json:"comparison,omitempty"`
}

func (x *TableSubQuery) Reset() {
	*x = TableSubQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSubQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSubQuery) ProtoMessage() {}

func (x *TableSubQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSubQuery.ProtoReflect.Descriptor instead.
func (*TableSubQuery) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{32}
}

func (x *TableSubQuery) GetIsCompound() bool {
	if x != nil {
		return x.IsCompound
	}
	return false
}

func (x *TableSubQuery) GetCompoundOperator() QueryLogicalOperator {
	if x != nil {
		return x.CompoundOperator
	}
	return QueryLogicalOperator_LOGICAL_OR
}

func (x *TableSubQuery) GetCompoundLeft() *TableSubQuery {
	if x != nil {
		return x.CompoundLeft
	}
	return nil
}

func (x *TableSubQuery) GetCompoundRight() *TableSubQuery {
	if x != nil {
		return x.CompoundRight
	}
	return nil
}

func (x *TableSubQuery) GetComparison() *TableSubqueryComparison {
	if x != nil {
		return x.Comparison
	}
	return nil
}

type DeleteSystemObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ObjectType   SystemObjectType   `protobuf:"varint,2,opt,name=objectType,proto3,enum=zbprotocol.SystemObjectType" json:"objectType,omitempty"`
	TableOwnerId string             `protobuf:"bytes,3,opt,name=tableOwnerId,proto3" json:"tableOwnerId,omitempty"`
	TableId      string             `protobuf:"bytes,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ObjectId     string             `protobuf:"bytes,5,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Nonce        int64              `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Credential   *ProofOfCredential `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *DeleteSystemObjectRequest) Reset() {
	*x = DeleteSystemObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zbprotocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemObjectRequest) ProtoMessage() {}

func (x *DeleteSystemObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zbprotocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemObjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteSystemObjectRequest) Descriptor() ([]byte, []int) {
	return file_zbprotocol_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteSystemObjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteSystemObjectRequest) GetObjectType() SystemObjectType {
	if x != nil {
		return x.ObjectType
	}
	return SystemObjectType_SUBUSER
}

func (x *DeleteSystemObjectRequest) GetTableOwnerId() string {
	if x != nil {
		return x.TableOwnerId
	}
	return ""
}

func (x *DeleteSystemObjectRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *DeleteSystemObjectRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *DeleteSystemObjectRequest) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DeleteSystemObjectRequest) GetCredential() *ProofOfCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

var File_zbprotocol_proto protoreflect.FileDescriptor

var file_zbprotocol_proto_rawDesc = []byte{
	0x0a, 0x10, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x2c,
	0x0a, 0x0e, 0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x72, 0x12, 0x0c,
	0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x77, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x77, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x09, 0x0a, 0x07, 0x5a, 0x62, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x37, 0x0a, 0x07, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x62, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x4e,
	0x65, 0x77, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x12, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x5c, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x50, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f,
	0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x8d, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xe9, 0x02,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xdf,
	0x01, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x76, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xfe, 0x01, 0x0a,
	0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xc2, 0x02,
	0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x4c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2a, 0x37, 0x0a,
	0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x00, 0x2a, 0x36, 0x0a,
	0x13, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x01, 0x2a, 0x5f, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41,
	0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a,
	0x57, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x2a, 0x84, 0x01, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x06, 0x2a, 0x37, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0x59, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x45, 0x58, 0x49, 0x43, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x42,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x32, 0xee, 0x09, 0x0a, 0x10, 0x5a,
	0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x1a, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x19, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a,
	0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0x13, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c,
	0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x19, 0x2e, 0x7a,
	0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x1a, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x1a, 0x1c,
	0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x16, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x7a, 0x62,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x24, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x1b, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e,
	0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x7a, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x5a, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x42, 0x22, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x2e, 0x7a, 0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x65, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zbprotocol_proto_rawDescOnce sync.Once
	file_zbprotocol_proto_rawDescData = file_zbprotocol_proto_rawDesc
)

func file_zbprotocol_proto_rawDescGZIP() []byte {
	file_zbprotocol_proto_rawDescOnce.Do(func() {
		file_zbprotocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_zbprotocol_proto_rawDescData)
	})
	return file_zbprotocol_proto_rawDescData
}

var file_zbprotocol_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_zbprotocol_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_zbprotocol_proto_goTypes = []interface{}{
	(TableDataFormat)(0),              // 0: zbprotocol.TableDataFormat
	(PermissionConstraintType)(0),     // 1: zbprotocol.PermissionConstraintType
	(FieldConstraintType)(0),          // 2: zbprotocol.FieldConstraintType
	(FieldConstraintValueType)(0),     // 3: zbprotocol.FieldConstraintValueType
	(PermissionAudienceType)(0),       // 4: zbprotocol.PermissionAudienceType
	(PermissionLevel)(0),              // 5: zbprotocol.PermissionLevel
	(CredentialProofType)(0),          // 6: zbprotocol.CredentialProofType
	(QueryOperator)(0),                // 7: zbprotocol.QueryOperator
	(QueryLogicalOperator)(0),         // 8: zbprotocol.QueryLogicalOperator
	(QueryOrdering)(0),                // 9: zbprotocol.QueryOrdering
	(SystemObjectType)(0),             // 10: zbprotocol.SystemObjectType
	(*EcdsaSignature)(nil),            // 11: zbprotocol.EcdsaSignature
	(*ProofOfCredential)(nil),         // 12: zbprotocol.ProofOfCredential
	(*ZbEmpty)(nil),                   // 13: zbprotocol.ZbEmpty
	(*ZbError)(nil),                   // 14: zbprotocol.ZbError
	(*VersionDetails)(nil),            // 15: zbprotocol.VersionDetails
	(*FieldConstraint)(nil),           // 16: zbprotocol.FieldConstraint
	(*PermissionConstraint)(nil),      // 17: zbprotocol.PermissionConstraint
	(*PermissionsEntry)(nil),          // 18: zbprotocol.PermissionsEntry
	(*AuthenticateUser)(nil),          // 19: zbprotocol.AuthenticateUser
	(*AuthenticateUserResponse)(nil),  // 20: zbprotocol.AuthenticateUserResponse
	(*NewSubIdentityRequest)(nil),     // 21: zbprotocol.NewSubIdentityRequest
	(*NewIdentityRequest)(nil),        // 22: zbprotocol.NewIdentityRequest
	(*SubIdentityModify)(nil),         // 23: zbprotocol.SubIdentityModify
	(*SubIdentitiesList)(nil),         // 24: zbprotocol.SubIdentitiesList
	(*NewIdentityConfirm)(nil),        // 25: zbprotocol.NewIdentityConfirm
	(*NewIdentityResponse)(nil),       // 26: zbprotocol.NewIdentityResponse
	(*TableIndexField)(nil),           // 27: zbprotocol.TableIndexField
	(*TableIndexFields)(nil),          // 28: zbprotocol.TableIndexFields
	(*SimpleRequest)(nil),             // 29: zbprotocol.SimpleRequest
	(*ListTablesRequest)(nil),         // 30: zbprotocol.ListTablesRequest
	(*ListTablesResponse)(nil),        // 31: zbprotocol.ListTablesResponse
	(*ListKeysRequest)(nil),           // 32: zbprotocol.ListKeysRequest
	(*ListKeysResponse)(nil),          // 33: zbprotocol.ListKeysResponse
	(*TableCreate)(nil),               // 34: zbprotocol.TableCreate
	(*TablePutMulti)(nil),             // 35: zbprotocol.TablePutMulti
	(*TablePut)(nil),                  // 36: zbprotocol.TablePut
	(*TableGet)(nil),                  // 37: zbprotocol.TableGet
	(*PaginationInfo)(nil),            // 38: zbprotocol.PaginationInfo
	(*DataPair)(nil),                  // 39: zbprotocol.DataPair
	(*TableGetResponse)(nil),          // 40: zbprotocol.TableGetResponse
	(*TableSubqueryComparison)(nil),   // 41: zbprotocol.TableSubqueryComparison
	(*TableQuery)(nil),                // 42: zbprotocol.TableQuery
	(*TableSubQuery)(nil),             // 43: zbprotocol.TableSubQuery
	(*DeleteSystemObjectRequest)(nil), // 44: zbprotocol.DeleteSystemObjectRequest
}
var file_zbprotocol_proto_depIdxs = []int32{
	6,  // 0: zbprotocol.ProofOfCredential.credType:type_name -> zbprotocol.CredentialProofType
	11, // 1: zbprotocol.ProofOfCredential.signature:type_name -> zbprotocol.EcdsaSignature
	2,  // 2: zbprotocol.FieldConstraint.constraintType:type_name -> zbprotocol.FieldConstraintType
	3,  // 3: zbprotocol.FieldConstraint.valueType:type_name -> zbprotocol.FieldConstraintValueType
	1,  // 4: zbprotocol.PermissionConstraint.constraintType:type_name -> zbprotocol.PermissionConstraintType
	16, // 5: zbprotocol.PermissionConstraint.fieldConstraint:type_name -> zbprotocol.FieldConstraint
	4,  // 6: zbprotocol.PermissionsEntry.audienceType:type_name -> zbprotocol.PermissionAudienceType
	5,  // 7: zbprotocol.PermissionsEntry.level:type_name -> zbprotocol.PermissionLevel
	12, // 8: zbprotocol.PermissionsEntry.credential:type_name -> zbprotocol.ProofOfCredential
	17, // 9: zbprotocol.PermissionsEntry.constraints:type_name -> zbprotocol.PermissionConstraint
	12, // 10: zbprotocol.AuthenticateUser.credential:type_name -> zbprotocol.ProofOfCredential
	12, // 11: zbprotocol.SubIdentityModify.credential:type_name -> zbprotocol.ProofOfCredential
	21, // 12: zbprotocol.SubIdentitiesList.subIdentities:type_name -> zbprotocol.NewSubIdentityRequest
	14, // 13: zbprotocol.NewIdentityResponse.error:type_name -> zbprotocol.ZbError
	9,  // 14: zbprotocol.TableIndexField.ordering:type_name -> zbprotocol.QueryOrdering
	27, // 15: zbprotocol.TableIndexFields.fields:type_name -> zbprotocol.TableIndexField
	12, // 16: zbprotocol.SimpleRequest.credential:type_name -> zbprotocol.ProofOfCredential
	12, // 17: zbprotocol.ListTablesRequest.credential:type_name -> zbprotocol.ProofOfCredential
	14, // 18: zbprotocol.ListTablesResponse.error:type_name -> zbprotocol.ZbError
	34, // 19: zbprotocol.ListTablesResponse.tableDefinitions:type_name -> zbprotocol.TableCreate
	12, // 20: zbprotocol.ListKeysRequest.credential:type_name -> zbprotocol.ProofOfCredential
	14, // 21: zbprotocol.ListKeysResponse.error:type_name -> zbprotocol.ZbError
	38, // 22: zbprotocol.ListKeysResponse.pagination:type_name -> zbprotocol.PaginationInfo
	0,  // 23: zbprotocol.TableCreate.dataFormat:type_name -> zbprotocol.TableDataFormat
	28, // 24: zbprotocol.TableCreate.indices:type_name -> zbprotocol.TableIndexFields
	12, // 25: zbprotocol.TableCreate.credential:type_name -> zbprotocol.ProofOfCredential
	18, // 26: zbprotocol.TableCreate.permissions:type_name -> zbprotocol.PermissionsEntry
	12, // 27: zbprotocol.TablePutMulti.credential:type_name -> zbprotocol.ProofOfCredential
	39, // 28: zbprotocol.TablePutMulti.pairs:type_name -> zbprotocol.DataPair
	12, // 29: zbprotocol.TablePut.credential:type_name -> zbprotocol.ProofOfCredential
	12, // 30: zbprotocol.TableGet.credential:type_name -> zbprotocol.ProofOfCredential
	14, // 31: zbprotocol.TableGetResponse.error:type_name -> zbprotocol.ZbError
	38, // 32: zbprotocol.TableGetResponse.pagination:type_name -> zbprotocol.PaginationInfo
	39, // 33: zbprotocol.TableGetResponse.data:type_name -> zbprotocol.DataPair
	7,  // 34: zbprotocol.TableSubqueryComparison.op:type_name -> zbprotocol.QueryOperator
	9,  // 35: zbprotocol.TableSubqueryComparison.ordering:type_name -> zbprotocol.QueryOrdering
	43, // 36: zbprotocol.TableQuery.query:type_name -> zbprotocol.TableSubQuery
	12, // 37: zbprotocol.TableQuery.credential:type_name -> zbprotocol.ProofOfCredential
	8,  // 38: zbprotocol.TableSubQuery.compoundOperator:type_name -> zbprotocol.QueryLogicalOperator
	43, // 39: zbprotocol.TableSubQuery.compoundLeft:type_name -> zbprotocol.TableSubQuery
	43, // 40: zbprotocol.TableSubQuery.compoundRight:type_name -> zbprotocol.TableSubQuery
	41, // 41: zbprotocol.TableSubQuery.comparison:type_name -> zbprotocol.TableSubqueryComparison
	10, // 42: zbprotocol.DeleteSystemObjectRequest.objectType:type_name -> zbprotocol.SystemObjectType
	12, // 43: zbprotocol.DeleteSystemObjectRequest.credential:type_name -> zbprotocol.ProofOfCredential
	13, // 44: zbprotocol.ZetabaseProvider.VersionInfo:input_type -> zbprotocol.ZbEmpty
	23, // 45: zbprotocol.ZetabaseProvider.ModifySubIdentity:input_type -> zbprotocol.SubIdentityModify
	29, // 46: zbprotocol.ZetabaseProvider.ListSubIdentities:input_type -> zbprotocol.SimpleRequest
	22, // 47: zbprotocol.ZetabaseProvider.RegisterNewIdentity:input_type -> zbprotocol.NewIdentityRequest
	25, // 48: zbprotocol.ZetabaseProvider.ConfirmNewIdentity:input_type -> zbprotocol.NewIdentityConfirm
	36, // 49: zbprotocol.ZetabaseProvider.PutData:input_type -> zbprotocol.TablePut
	35, // 50: zbprotocol.ZetabaseProvider.PutDataMulti:input_type -> zbprotocol.TablePutMulti
	34, // 51: zbprotocol.ZetabaseProvider.CreateTable:input_type -> zbprotocol.TableCreate
	37, // 52: zbprotocol.ZetabaseProvider.GetData:input_type -> zbprotocol.TableGet
	42, // 53: zbprotocol.ZetabaseProvider.QueryData:input_type -> zbprotocol.TableQuery
	42, // 54: zbprotocol.ZetabaseProvider.QueryKeys:input_type -> zbprotocol.TableQuery
	21, // 55: zbprotocol.ZetabaseProvider.CreateUser:input_type -> zbprotocol.NewSubIdentityRequest
	18, // 56: zbprotocol.ZetabaseProvider.SetPermission:input_type -> zbprotocol.PermissionsEntry
	19, // 57: zbprotocol.ZetabaseProvider.LoginUser:input_type -> zbprotocol.AuthenticateUser
	30, // 58: zbprotocol.ZetabaseProvider.ListTables:input_type -> zbprotocol.ListTablesRequest
	32, // 59: zbprotocol.ZetabaseProvider.ListKeys:input_type -> zbprotocol.ListKeysRequest
	44, // 60: zbprotocol.ZetabaseProvider.DeleteObject:input_type -> zbprotocol.DeleteSystemObjectRequest
	15, // 61: zbprotocol.ZetabaseProvider.VersionInfo:output_type -> zbprotocol.VersionDetails
	14, // 62: zbprotocol.ZetabaseProvider.ModifySubIdentity:output_type -> zbprotocol.ZbError
	24, // 63: zbprotocol.ZetabaseProvider.ListSubIdentities:output_type -> zbprotocol.SubIdentitiesList
	26, // 64: zbprotocol.ZetabaseProvider.RegisterNewIdentity:output_type -> zbprotocol.NewIdentityResponse
	14, // 65: zbprotocol.ZetabaseProvider.ConfirmNewIdentity:output_type -> zbprotocol.ZbError
	14, // 66: zbprotocol.ZetabaseProvider.PutData:output_type -> zbprotocol.ZbError
	14, // 67: zbprotocol.ZetabaseProvider.PutDataMulti:output_type -> zbprotocol.ZbError
	14, // 68: zbprotocol.ZetabaseProvider.CreateTable:output_type -> zbprotocol.ZbError
	40, // 69: zbprotocol.ZetabaseProvider.GetData:output_type -> zbprotocol.TableGetResponse
	40, // 70: zbprotocol.ZetabaseProvider.QueryData:output_type -> zbprotocol.TableGetResponse
	33, // 71: zbprotocol.ZetabaseProvider.QueryKeys:output_type -> zbprotocol.ListKeysResponse
	26, // 72: zbprotocol.ZetabaseProvider.CreateUser:output_type -> zbprotocol.NewIdentityResponse
	14, // 73: zbprotocol.ZetabaseProvider.SetPermission:output_type -> zbprotocol.ZbError
	20, // 74: zbprotocol.ZetabaseProvider.LoginUser:output_type -> zbprotocol.AuthenticateUserResponse
	31, // 75: zbprotocol.ZetabaseProvider.ListTables:output_type -> zbprotocol.ListTablesResponse
	33, // 76: zbprotocol.ZetabaseProvider.ListKeys:output_type -> zbprotocol.ListKeysResponse
	14, // 77: zbprotocol.ZetabaseProvider.DeleteObject:output_type -> zbprotocol.ZbError
	61, // [61:78] is the sub-list for method output_type
	44, // [44:61] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_zbprotocol_proto_init() }
func file_zbprotocol_proto_init() {
	if File_zbprotocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zbprotocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdsaSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZbEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZbError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSubIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubIdentityModify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubIdentitiesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewIdentityConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndexField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndexFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablePutMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablePut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSubqueryComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSubQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zbprotocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zbprotocol_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zbprotocol_proto_goTypes,
		DependencyIndexes: file_zbprotocol_proto_depIdxs,
		EnumInfos:         file_zbprotocol_proto_enumTypes,
		MessageInfos:      file_zbprotocol_proto_msgTypes,
	}.Build()
	File_zbprotocol_proto = out.File
	file_zbprotocol_proto_rawDesc = nil
	file_zbprotocol_proto_goTypes = nil
	file_zbprotocol_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZetabaseProviderClient is the client API for ZetabaseProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZetabaseProviderClient interface {
	VersionInfo(ctx context.Context, in *ZbEmpty, opts ...grpc.CallOption) (*VersionDetails, error)
	ModifySubIdentity(ctx context.Context, in *SubIdentityModify, opts ...grpc.CallOption) (*ZbError, error)
	ListSubIdentities(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SubIdentitiesList, error)
	RegisterNewIdentity(ctx context.Context, in *NewIdentityRequest, opts ...grpc.CallOption) (*NewIdentityResponse, error)
	ConfirmNewIdentity(ctx context.Context, in *NewIdentityConfirm, opts ...grpc.CallOption) (*ZbError, error)
	PutData(ctx context.Context, in *TablePut, opts ...grpc.CallOption) (*ZbError, error)
	PutDataMulti(ctx context.Context, in *TablePutMulti, opts ...grpc.CallOption) (*ZbError, error)
	CreateTable(ctx context.Context, in *TableCreate, opts ...grpc.CallOption) (*ZbError, error)
	GetData(ctx context.Context, in *TableGet, opts ...grpc.CallOption) (*TableGetResponse, error)
	QueryData(ctx context.Context, in *TableQuery, opts ...grpc.CallOption) (*TableGetResponse, error)
	QueryKeys(ctx context.Context, in *TableQuery, opts ...grpc.CallOption) (*ListKeysResponse, error)
	CreateUser(ctx context.Context, in *NewSubIdentityRequest, opts ...grpc.CallOption) (*NewIdentityResponse, error)
	SetPermission(ctx context.Context, in *PermissionsEntry, opts ...grpc.CallOption) (*ZbError, error)
	LoginUser(ctx context.Context, in *AuthenticateUser, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	DeleteObject(ctx context.Context, in *DeleteSystemObjectRequest, opts ...grpc.CallOption) (*ZbError, error)
}

type zetabaseProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewZetabaseProviderClient(cc grpc.ClientConnInterface) ZetabaseProviderClient {
	return &zetabaseProviderClient{cc}
}

func (c *zetabaseProviderClient) VersionInfo(ctx context.Context, in *ZbEmpty, opts ...grpc.CallOption) (*VersionDetails, error) {
	out := new(VersionDetails)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/VersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) ModifySubIdentity(ctx context.Context, in *SubIdentityModify, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/ModifySubIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) ListSubIdentities(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SubIdentitiesList, error) {
	out := new(SubIdentitiesList)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/ListSubIdentities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) RegisterNewIdentity(ctx context.Context, in *NewIdentityRequest, opts ...grpc.CallOption) (*NewIdentityResponse, error) {
	out := new(NewIdentityResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/RegisterNewIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) ConfirmNewIdentity(ctx context.Context, in *NewIdentityConfirm, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/ConfirmNewIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) PutData(ctx context.Context, in *TablePut, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/PutData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) PutDataMulti(ctx context.Context, in *TablePutMulti, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/PutDataMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) CreateTable(ctx context.Context, in *TableCreate, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) GetData(ctx context.Context, in *TableGet, opts ...grpc.CallOption) (*TableGetResponse, error) {
	out := new(TableGetResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) QueryData(ctx context.Context, in *TableQuery, opts ...grpc.CallOption) (*TableGetResponse, error) {
	out := new(TableGetResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/QueryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) QueryKeys(ctx context.Context, in *TableQuery, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/QueryKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) CreateUser(ctx context.Context, in *NewSubIdentityRequest, opts ...grpc.CallOption) (*NewIdentityResponse, error) {
	out := new(NewIdentityResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) SetPermission(ctx context.Context, in *PermissionsEntry, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/SetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) LoginUser(ctx context.Context, in *AuthenticateUser, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetabaseProviderClient) DeleteObject(ctx context.Context, in *DeleteSystemObjectRequest, opts ...grpc.CallOption) (*ZbError, error) {
	out := new(ZbError)
	err := c.cc.Invoke(ctx, "/zbprotocol.ZetabaseProvider/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZetabaseProviderServer is the server API for ZetabaseProvider service.
type ZetabaseProviderServer interface {
	VersionInfo(context.Context, *ZbEmpty) (*VersionDetails, error)
	ModifySubIdentity(context.Context, *SubIdentityModify) (*ZbError, error)
	ListSubIdentities(context.Context, *SimpleRequest) (*SubIdentitiesList, error)
	RegisterNewIdentity(context.Context, *NewIdentityRequest) (*NewIdentityResponse, error)
	ConfirmNewIdentity(context.Context, *NewIdentityConfirm) (*ZbError, error)
	PutData(context.Context, *TablePut) (*ZbError, error)
	PutDataMulti(context.Context, *TablePutMulti) (*ZbError, error)
	CreateTable(context.Context, *TableCreate) (*ZbError, error)
	GetData(context.Context, *TableGet) (*TableGetResponse, error)
	QueryData(context.Context, *TableQuery) (*TableGetResponse, error)
	QueryKeys(context.Context, *TableQuery) (*ListKeysResponse, error)
	CreateUser(context.Context, *NewSubIdentityRequest) (*NewIdentityResponse, error)
	SetPermission(context.Context, *PermissionsEntry) (*ZbError, error)
	LoginUser(context.Context, *AuthenticateUser) (*AuthenticateUserResponse, error)
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	DeleteObject(context.Context, *DeleteSystemObjectRequest) (*ZbError, error)
}

// UnimplementedZetabaseProviderServer can be embedded to have forward compatible implementations.
type UnimplementedZetabaseProviderServer struct {
}

func (*UnimplementedZetabaseProviderServer) VersionInfo(context.Context, *ZbEmpty) (*VersionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionInfo not implemented")
}
func (*UnimplementedZetabaseProviderServer) ModifySubIdentity(context.Context, *SubIdentityModify) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySubIdentity not implemented")
}
func (*UnimplementedZetabaseProviderServer) ListSubIdentities(context.Context, *SimpleRequest) (*SubIdentitiesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubIdentities not implemented")
}
func (*UnimplementedZetabaseProviderServer) RegisterNewIdentity(context.Context, *NewIdentityRequest) (*NewIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewIdentity not implemented")
}
func (*UnimplementedZetabaseProviderServer) ConfirmNewIdentity(context.Context, *NewIdentityConfirm) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNewIdentity not implemented")
}
func (*UnimplementedZetabaseProviderServer) PutData(context.Context, *TablePut) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutData not implemented")
}
func (*UnimplementedZetabaseProviderServer) PutDataMulti(context.Context, *TablePutMulti) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDataMulti not implemented")
}
func (*UnimplementedZetabaseProviderServer) CreateTable(context.Context, *TableCreate) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedZetabaseProviderServer) GetData(context.Context, *TableGet) (*TableGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (*UnimplementedZetabaseProviderServer) QueryData(context.Context, *TableQuery) (*TableGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryData not implemented")
}
func (*UnimplementedZetabaseProviderServer) QueryKeys(context.Context, *TableQuery) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKeys not implemented")
}
func (*UnimplementedZetabaseProviderServer) CreateUser(context.Context, *NewSubIdentityRequest) (*NewIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedZetabaseProviderServer) SetPermission(context.Context, *PermissionsEntry) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermission not implemented")
}
func (*UnimplementedZetabaseProviderServer) LoginUser(context.Context, *AuthenticateUser) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (*UnimplementedZetabaseProviderServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (*UnimplementedZetabaseProviderServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (*UnimplementedZetabaseProviderServer) DeleteObject(context.Context, *DeleteSystemObjectRequest) (*ZbError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}

func RegisterZetabaseProviderServer(s *grpc.Server, srv ZetabaseProviderServer) {
	s.RegisterService(&_ZetabaseProvider_serviceDesc, srv)
}

func _ZetabaseProvider_VersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZbEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).VersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/VersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).VersionInfo(ctx, req.(*ZbEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_ModifySubIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubIdentityModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).ModifySubIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/ModifySubIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).ModifySubIdentity(ctx, req.(*SubIdentityModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_ListSubIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).ListSubIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/ListSubIdentities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).ListSubIdentities(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_RegisterNewIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).RegisterNewIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/RegisterNewIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).RegisterNewIdentity(ctx, req.(*NewIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_ConfirmNewIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIdentityConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).ConfirmNewIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/ConfirmNewIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).ConfirmNewIdentity(ctx, req.(*NewIdentityConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_PutData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TablePut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).PutData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/PutData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).PutData(ctx, req.(*TablePut))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_PutDataMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TablePutMulti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).PutDataMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/PutDataMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).PutDataMulti(ctx, req.(*TablePutMulti))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).CreateTable(ctx, req.(*TableCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).GetData(ctx, req.(*TableGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_QueryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).QueryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/QueryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).QueryData(ctx, req.(*TableQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_QueryKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).QueryKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/QueryKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).QueryKeys(ctx, req.(*TableQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSubIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).CreateUser(ctx, req.(*NewSubIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_SetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionsEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).SetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/SetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).SetPermission(ctx, req.(*PermissionsEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).LoginUser(ctx, req.(*AuthenticateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZetabaseProvider_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetabaseProviderServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbprotocol.ZetabaseProvider/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetabaseProviderServer).DeleteObject(ctx, req.(*DeleteSystemObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZetabaseProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zbprotocol.ZetabaseProvider",
	HandlerType: (*ZetabaseProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VersionInfo",
			Handler:    _ZetabaseProvider_VersionInfo_Handler,
		},
		{
			MethodName: "ModifySubIdentity",
			Handler:    _ZetabaseProvider_ModifySubIdentity_Handler,
		},
		{
			MethodName: "ListSubIdentities",
			Handler:    _ZetabaseProvider_ListSubIdentities_Handler,
		},
		{
			MethodName: "RegisterNewIdentity",
			Handler:    _ZetabaseProvider_RegisterNewIdentity_Handler,
		},
		{
			MethodName: "ConfirmNewIdentity",
			Handler:    _ZetabaseProvider_ConfirmNewIdentity_Handler,
		},
		{
			MethodName: "PutData",
			Handler:    _ZetabaseProvider_PutData_Handler,
		},
		{
			MethodName: "PutDataMulti",
			Handler:    _ZetabaseProvider_PutDataMulti_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _ZetabaseProvider_CreateTable_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _ZetabaseProvider_GetData_Handler,
		},
		{
			MethodName: "QueryData",
			Handler:    _ZetabaseProvider_QueryData_Handler,
		},
		{
			MethodName: "QueryKeys",
			Handler:    _ZetabaseProvider_QueryKeys_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ZetabaseProvider_CreateUser_Handler,
		},
		{
			MethodName: "SetPermission",
			Handler:    _ZetabaseProvider_SetPermission_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _ZetabaseProvider_LoginUser_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _ZetabaseProvider_ListTables_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _ZetabaseProvider_ListKeys_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ZetabaseProvider_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zbprotocol.proto",
}
