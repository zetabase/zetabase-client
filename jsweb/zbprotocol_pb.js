// source: zbprotocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.zbprotocol.AuthenticateUser', null, global);
goog.exportSymbol('proto.zbprotocol.AuthenticateUserResponse', null, global);
goog.exportSymbol('proto.zbprotocol.CredentialProofType', null, global);
goog.exportSymbol('proto.zbprotocol.DataPair', null, global);
goog.exportSymbol('proto.zbprotocol.DeleteSystemObjectRequest', null, global);
goog.exportSymbol('proto.zbprotocol.EcdsaSignature', null, global);
goog.exportSymbol('proto.zbprotocol.FieldConstraint', null, global);
goog.exportSymbol('proto.zbprotocol.FieldConstraintType', null, global);
goog.exportSymbol('proto.zbprotocol.FieldConstraintValueType', null, global);
goog.exportSymbol('proto.zbprotocol.ListKeysRequest', null, global);
goog.exportSymbol('proto.zbprotocol.ListKeysResponse', null, global);
goog.exportSymbol('proto.zbprotocol.ListTablesRequest', null, global);
goog.exportSymbol('proto.zbprotocol.ListTablesResponse', null, global);
goog.exportSymbol('proto.zbprotocol.NewIdentityConfirm', null, global);
goog.exportSymbol('proto.zbprotocol.NewIdentityRequest', null, global);
goog.exportSymbol('proto.zbprotocol.NewIdentityResponse', null, global);
goog.exportSymbol('proto.zbprotocol.NewSubIdentityRequest', null, global);
goog.exportSymbol('proto.zbprotocol.PaginationInfo', null, global);
goog.exportSymbol('proto.zbprotocol.PermissionAudienceType', null, global);
goog.exportSymbol('proto.zbprotocol.PermissionConstraint', null, global);
goog.exportSymbol('proto.zbprotocol.PermissionConstraintType', null, global);
goog.exportSymbol('proto.zbprotocol.PermissionLevel', null, global);
goog.exportSymbol('proto.zbprotocol.PermissionsEntry', null, global);
goog.exportSymbol('proto.zbprotocol.ProofOfCredential', null, global);
goog.exportSymbol('proto.zbprotocol.QueryLogicalOperator', null, global);
goog.exportSymbol('proto.zbprotocol.QueryOperator', null, global);
goog.exportSymbol('proto.zbprotocol.QueryOrdering', null, global);
goog.exportSymbol('proto.zbprotocol.SimpleRequest', null, global);
goog.exportSymbol('proto.zbprotocol.SubIdentitiesList', null, global);
goog.exportSymbol('proto.zbprotocol.SubIdentityModify', null, global);
goog.exportSymbol('proto.zbprotocol.SystemObjectType', null, global);
goog.exportSymbol('proto.zbprotocol.TableCreate', null, global);
goog.exportSymbol('proto.zbprotocol.TableDataFormat', null, global);
goog.exportSymbol('proto.zbprotocol.TableGet', null, global);
goog.exportSymbol('proto.zbprotocol.TableGetResponse', null, global);
goog.exportSymbol('proto.zbprotocol.TableIndexField', null, global);
goog.exportSymbol('proto.zbprotocol.TableIndexFields', null, global);
goog.exportSymbol('proto.zbprotocol.TablePut', null, global);
goog.exportSymbol('proto.zbprotocol.TablePutMulti', null, global);
goog.exportSymbol('proto.zbprotocol.TableQuery', null, global);
goog.exportSymbol('proto.zbprotocol.TableSubQuery', null, global);
goog.exportSymbol('proto.zbprotocol.TableSubqueryComparison', null, global);
goog.exportSymbol('proto.zbprotocol.VersionDetails', null, global);
goog.exportSymbol('proto.zbprotocol.ZbEmpty', null, global);
goog.exportSymbol('proto.zbprotocol.ZbError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.EcdsaSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.EcdsaSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.EcdsaSignature.displayName = 'proto.zbprotocol.EcdsaSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ProofOfCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.ProofOfCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ProofOfCredential.displayName = 'proto.zbprotocol.ProofOfCredential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ZbEmpty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.ZbEmpty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ZbEmpty.displayName = 'proto.zbprotocol.ZbEmpty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ZbError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.ZbError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ZbError.displayName = 'proto.zbprotocol.ZbError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.VersionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.VersionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.VersionDetails.displayName = 'proto.zbprotocol.VersionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.FieldConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.FieldConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.FieldConstraint.displayName = 'proto.zbprotocol.FieldConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.PermissionConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.PermissionConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.PermissionConstraint.displayName = 'proto.zbprotocol.PermissionConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.PermissionsEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.PermissionsEntry.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.PermissionsEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.PermissionsEntry.displayName = 'proto.zbprotocol.PermissionsEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.AuthenticateUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.AuthenticateUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.AuthenticateUser.displayName = 'proto.zbprotocol.AuthenticateUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.AuthenticateUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.AuthenticateUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.AuthenticateUserResponse.displayName = 'proto.zbprotocol.AuthenticateUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.NewSubIdentityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.NewSubIdentityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.NewSubIdentityRequest.displayName = 'proto.zbprotocol.NewSubIdentityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.NewIdentityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.NewIdentityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.NewIdentityRequest.displayName = 'proto.zbprotocol.NewIdentityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.SubIdentityModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.SubIdentityModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.SubIdentityModify.displayName = 'proto.zbprotocol.SubIdentityModify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.SubIdentitiesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.SubIdentitiesList.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.SubIdentitiesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.SubIdentitiesList.displayName = 'proto.zbprotocol.SubIdentitiesList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.NewIdentityConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.NewIdentityConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.NewIdentityConfirm.displayName = 'proto.zbprotocol.NewIdentityConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.NewIdentityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.NewIdentityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.NewIdentityResponse.displayName = 'proto.zbprotocol.NewIdentityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableIndexField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.TableIndexField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableIndexField.displayName = 'proto.zbprotocol.TableIndexField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableIndexFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.TableIndexFields.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.TableIndexFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableIndexFields.displayName = 'proto.zbprotocol.TableIndexFields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.SimpleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.SimpleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.SimpleRequest.displayName = 'proto.zbprotocol.SimpleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ListTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.ListTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ListTablesRequest.displayName = 'proto.zbprotocol.ListTablesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ListTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.ListTablesResponse.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.ListTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ListTablesResponse.displayName = 'proto.zbprotocol.ListTablesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ListKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.ListKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ListKeysRequest.displayName = 'proto.zbprotocol.ListKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.ListKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.ListKeysResponse.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.ListKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.ListKeysResponse.displayName = 'proto.zbprotocol.ListKeysResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.TableCreate.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.TableCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableCreate.displayName = 'proto.zbprotocol.TableCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TablePutMulti = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.TablePutMulti.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.TablePutMulti, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TablePutMulti.displayName = 'proto.zbprotocol.TablePutMulti';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TablePut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.TablePut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TablePut.displayName = 'proto.zbprotocol.TablePut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.TableGet.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.TableGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableGet.displayName = 'proto.zbprotocol.TableGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.PaginationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.PaginationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.PaginationInfo.displayName = 'proto.zbprotocol.PaginationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.DataPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.DataPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.DataPair.displayName = 'proto.zbprotocol.DataPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbprotocol.TableGetResponse.repeatedFields_, null);
};
goog.inherits(proto.zbprotocol.TableGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableGetResponse.displayName = 'proto.zbprotocol.TableGetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableSubqueryComparison = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.TableSubqueryComparison, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableSubqueryComparison.displayName = 'proto.zbprotocol.TableSubqueryComparison';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.TableQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableQuery.displayName = 'proto.zbprotocol.TableQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.TableSubQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.TableSubQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.TableSubQuery.displayName = 'proto.zbprotocol.TableSubQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbprotocol.DeleteSystemObjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbprotocol.DeleteSystemObjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbprotocol.DeleteSystemObjectRequest.displayName = 'proto.zbprotocol.DeleteSystemObjectRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.EcdsaSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.EcdsaSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.EcdsaSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.EcdsaSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: jspb.Message.getFieldWithDefault(msg, 1, ""),
    s: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.EcdsaSignature}
 */
proto.zbprotocol.EcdsaSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.EcdsaSignature;
  return proto.zbprotocol.EcdsaSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.EcdsaSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.EcdsaSignature}
 */
proto.zbprotocol.EcdsaSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.EcdsaSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.EcdsaSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.EcdsaSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.EcdsaSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string r = 1;
 * @return {string}
 */
proto.zbprotocol.EcdsaSignature.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.EcdsaSignature} returns this
 */
proto.zbprotocol.EcdsaSignature.prototype.setR = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string s = 2;
 * @return {string}
 */
proto.zbprotocol.EcdsaSignature.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.EcdsaSignature} returns this
 */
proto.zbprotocol.EcdsaSignature.prototype.setS = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ProofOfCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ProofOfCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ProofOfCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ProofOfCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    credtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: (f = msg.getSignature()) && proto.zbprotocol.EcdsaSignature.toObject(includeInstance, f),
    jwttoken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.ProofOfCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ProofOfCredential;
  return proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ProofOfCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zbprotocol.CredentialProofType} */ (reader.readEnum());
      msg.setCredtype(value);
      break;
    case 2:
      var value = new proto.zbprotocol.EcdsaSignature;
      reader.readMessage(value,proto.zbprotocol.EcdsaSignature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ProofOfCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ProofOfCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zbprotocol.EcdsaSignature.serializeBinaryToWriter
    );
  }
  f = message.getJwttoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional CredentialProofType credType = 1;
 * @return {!proto.zbprotocol.CredentialProofType}
 */
proto.zbprotocol.ProofOfCredential.prototype.getCredtype = function() {
  return /** @type {!proto.zbprotocol.CredentialProofType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zbprotocol.CredentialProofType} value
 * @return {!proto.zbprotocol.ProofOfCredential} returns this
 */
proto.zbprotocol.ProofOfCredential.prototype.setCredtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EcdsaSignature signature = 2;
 * @return {?proto.zbprotocol.EcdsaSignature}
 */
proto.zbprotocol.ProofOfCredential.prototype.getSignature = function() {
  return /** @type{?proto.zbprotocol.EcdsaSignature} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.EcdsaSignature, 2));
};


/**
 * @param {?proto.zbprotocol.EcdsaSignature|undefined} value
 * @return {!proto.zbprotocol.ProofOfCredential} returns this
*/
proto.zbprotocol.ProofOfCredential.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ProofOfCredential} returns this
 */
proto.zbprotocol.ProofOfCredential.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ProofOfCredential.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string jwtToken = 3;
 * @return {string}
 */
proto.zbprotocol.ProofOfCredential.prototype.getJwttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ProofOfCredential} returns this
 */
proto.zbprotocol.ProofOfCredential.prototype.setJwttoken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ZbEmpty.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ZbEmpty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ZbEmpty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ZbEmpty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ZbEmpty}
 */
proto.zbprotocol.ZbEmpty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ZbEmpty;
  return proto.zbprotocol.ZbEmpty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ZbEmpty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ZbEmpty}
 */
proto.zbprotocol.ZbEmpty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ZbEmpty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ZbEmpty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ZbEmpty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ZbEmpty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ZbError.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ZbError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ZbError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ZbError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ZbError}
 */
proto.zbprotocol.ZbError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ZbError;
  return proto.zbprotocol.ZbError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ZbError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ZbError}
 */
proto.zbprotocol.ZbError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ZbError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ZbError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ZbError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ZbError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 code = 1;
 * @return {number}
 */
proto.zbprotocol.ZbError.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.ZbError} returns this
 */
proto.zbprotocol.ZbError.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.zbprotocol.ZbError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ZbError} returns this
 */
proto.zbprotocol.ZbError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.VersionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.VersionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.VersionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.VersionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverversion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientversion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minclientversion: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.VersionDetails}
 */
proto.zbprotocol.VersionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.VersionDetails;
  return proto.zbprotocol.VersionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.VersionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.VersionDetails}
 */
proto.zbprotocol.VersionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerversion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinclientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.VersionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.VersionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.VersionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.VersionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerversion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinclientversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string serverVersion = 1;
 * @return {string}
 */
proto.zbprotocol.VersionDetails.prototype.getServerversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.VersionDetails} returns this
 */
proto.zbprotocol.VersionDetails.prototype.setServerversion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientVersion = 2;
 * @return {string}
 */
proto.zbprotocol.VersionDetails.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.VersionDetails} returns this
 */
proto.zbprotocol.VersionDetails.prototype.setClientversion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string minClientVersion = 3;
 * @return {string}
 */
proto.zbprotocol.VersionDetails.prototype.getMinclientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.VersionDetails} returns this
 */
proto.zbprotocol.VersionDetails.prototype.setMinclientversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.FieldConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.FieldConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.FieldConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.FieldConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    constrainttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valuetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requiredvalue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.FieldConstraint}
 */
proto.zbprotocol.FieldConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.FieldConstraint;
  return proto.zbprotocol.FieldConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.FieldConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.FieldConstraint}
 */
proto.zbprotocol.FieldConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zbprotocol.FieldConstraintType} */ (reader.readEnum());
      msg.setConstrainttype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldkey(value);
      break;
    case 3:
      var value = /** @type {!proto.zbprotocol.FieldConstraintValueType} */ (reader.readEnum());
      msg.setValuetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.FieldConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.FieldConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.FieldConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.FieldConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstrainttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFieldkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequiredvalue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional FieldConstraintType constraintType = 1;
 * @return {!proto.zbprotocol.FieldConstraintType}
 */
proto.zbprotocol.FieldConstraint.prototype.getConstrainttype = function() {
  return /** @type {!proto.zbprotocol.FieldConstraintType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zbprotocol.FieldConstraintType} value
 * @return {!proto.zbprotocol.FieldConstraint} returns this
 */
proto.zbprotocol.FieldConstraint.prototype.setConstrainttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string fieldKey = 2;
 * @return {string}
 */
proto.zbprotocol.FieldConstraint.prototype.getFieldkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.FieldConstraint} returns this
 */
proto.zbprotocol.FieldConstraint.prototype.setFieldkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FieldConstraintValueType valueType = 3;
 * @return {!proto.zbprotocol.FieldConstraintValueType}
 */
proto.zbprotocol.FieldConstraint.prototype.getValuetype = function() {
  return /** @type {!proto.zbprotocol.FieldConstraintValueType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.zbprotocol.FieldConstraintValueType} value
 * @return {!proto.zbprotocol.FieldConstraint} returns this
 */
proto.zbprotocol.FieldConstraint.prototype.setValuetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string requiredValue = 4;
 * @return {string}
 */
proto.zbprotocol.FieldConstraint.prototype.getRequiredvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.FieldConstraint} returns this
 */
proto.zbprotocol.FieldConstraint.prototype.setRequiredvalue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.PermissionConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.PermissionConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.PermissionConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PermissionConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    constrainttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldconstraint: (f = msg.getFieldconstraint()) && proto.zbprotocol.FieldConstraint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.PermissionConstraint}
 */
proto.zbprotocol.PermissionConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.PermissionConstraint;
  return proto.zbprotocol.PermissionConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.PermissionConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.PermissionConstraint}
 */
proto.zbprotocol.PermissionConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zbprotocol.PermissionConstraintType} */ (reader.readEnum());
      msg.setConstrainttype(value);
      break;
    case 2:
      var value = new proto.zbprotocol.FieldConstraint;
      reader.readMessage(value,proto.zbprotocol.FieldConstraint.deserializeBinaryFromReader);
      msg.setFieldconstraint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.PermissionConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.PermissionConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.PermissionConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PermissionConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstrainttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFieldconstraint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zbprotocol.FieldConstraint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PermissionConstraintType constraintType = 1;
 * @return {!proto.zbprotocol.PermissionConstraintType}
 */
proto.zbprotocol.PermissionConstraint.prototype.getConstrainttype = function() {
  return /** @type {!proto.zbprotocol.PermissionConstraintType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zbprotocol.PermissionConstraintType} value
 * @return {!proto.zbprotocol.PermissionConstraint} returns this
 */
proto.zbprotocol.PermissionConstraint.prototype.setConstrainttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FieldConstraint fieldConstraint = 2;
 * @return {?proto.zbprotocol.FieldConstraint}
 */
proto.zbprotocol.PermissionConstraint.prototype.getFieldconstraint = function() {
  return /** @type{?proto.zbprotocol.FieldConstraint} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.FieldConstraint, 2));
};


/**
 * @param {?proto.zbprotocol.FieldConstraint|undefined} value
 * @return {!proto.zbprotocol.PermissionConstraint} returns this
*/
proto.zbprotocol.PermissionConstraint.prototype.setFieldconstraint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.PermissionConstraint} returns this
 */
proto.zbprotocol.PermissionConstraint.prototype.clearFieldconstraint = function() {
  return this.setFieldconstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.PermissionConstraint.prototype.hasFieldconstraint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.PermissionsEntry.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.PermissionsEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.PermissionsEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.PermissionsEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PermissionsEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    audiencetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    audienceid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    level: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f),
    constraintsList: jspb.Message.toObjectList(msg.getConstraintsList(),
    proto.zbprotocol.PermissionConstraint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.PermissionsEntry}
 */
proto.zbprotocol.PermissionsEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.PermissionsEntry;
  return proto.zbprotocol.PermissionsEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.PermissionsEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.PermissionsEntry}
 */
proto.zbprotocol.PermissionsEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 3:
      var value = /** @type {!proto.zbprotocol.PermissionAudienceType} */ (reader.readEnum());
      msg.setAudiencetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudienceid(value);
      break;
    case 5:
      var value = /** @type {!proto.zbprotocol.PermissionLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 7:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    case 8:
      var value = new proto.zbprotocol.PermissionConstraint;
      reader.readMessage(value,proto.zbprotocol.PermissionConstraint.deserializeBinaryFromReader);
      msg.addConstraints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.PermissionsEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.PermissionsEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.PermissionsEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PermissionsEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAudiencetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAudienceid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
  f = message.getConstraintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.zbprotocol.PermissionConstraint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.PermissionsEntry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableId = 2;
 * @return {string}
 */
proto.zbprotocol.PermissionsEntry.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PermissionAudienceType audienceType = 3;
 * @return {!proto.zbprotocol.PermissionAudienceType}
 */
proto.zbprotocol.PermissionsEntry.prototype.getAudiencetype = function() {
  return /** @type {!proto.zbprotocol.PermissionAudienceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.zbprotocol.PermissionAudienceType} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setAudiencetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string audienceId = 4;
 * @return {string}
 */
proto.zbprotocol.PermissionsEntry.prototype.getAudienceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setAudienceid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PermissionLevel level = 5;
 * @return {!proto.zbprotocol.PermissionLevel}
 */
proto.zbprotocol.PermissionsEntry.prototype.getLevel = function() {
  return /** @type {!proto.zbprotocol.PermissionLevel} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.zbprotocol.PermissionLevel} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 nonce = 6;
 * @return {number}
 */
proto.zbprotocol.PermissionsEntry.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProofOfCredential credential = 7;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.PermissionsEntry.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 7));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
*/
proto.zbprotocol.PermissionsEntry.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.PermissionsEntry.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated PermissionConstraint constraints = 8;
 * @return {!Array<!proto.zbprotocol.PermissionConstraint>}
 */
proto.zbprotocol.PermissionsEntry.prototype.getConstraintsList = function() {
  return /** @type{!Array<!proto.zbprotocol.PermissionConstraint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.PermissionConstraint, 8));
};


/**
 * @param {!Array<!proto.zbprotocol.PermissionConstraint>} value
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
*/
proto.zbprotocol.PermissionsEntry.prototype.setConstraintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.zbprotocol.PermissionConstraint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.PermissionConstraint}
 */
proto.zbprotocol.PermissionsEntry.prototype.addConstraints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.zbprotocol.PermissionConstraint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.PermissionsEntry} returns this
 */
proto.zbprotocol.PermissionsEntry.prototype.clearConstraintsList = function() {
  return this.setConstraintsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.AuthenticateUser.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.AuthenticateUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.AuthenticateUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.AuthenticateUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    handle: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.AuthenticateUser}
 */
proto.zbprotocol.AuthenticateUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.AuthenticateUser;
  return proto.zbprotocol.AuthenticateUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.AuthenticateUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.AuthenticateUser}
 */
proto.zbprotocol.AuthenticateUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 5:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.AuthenticateUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.AuthenticateUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.AuthenticateUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.AuthenticateUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string parentId = 1;
 * @return {string}
 */
proto.zbprotocol.AuthenticateUser.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
 */
proto.zbprotocol.AuthenticateUser.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string handle = 2;
 * @return {string}
 */
proto.zbprotocol.AuthenticateUser.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
 */
proto.zbprotocol.AuthenticateUser.prototype.setHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.zbprotocol.AuthenticateUser.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
 */
proto.zbprotocol.AuthenticateUser.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 nonce = 4;
 * @return {number}
 */
proto.zbprotocol.AuthenticateUser.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
 */
proto.zbprotocol.AuthenticateUser.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ProofOfCredential credential = 5;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.AuthenticateUser.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 5));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
*/
proto.zbprotocol.AuthenticateUser.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.AuthenticateUser} returns this
 */
proto.zbprotocol.AuthenticateUser.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.AuthenticateUser.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.AuthenticateUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.AuthenticateUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.AuthenticateUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jwttoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.AuthenticateUserResponse}
 */
proto.zbprotocol.AuthenticateUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.AuthenticateUserResponse;
  return proto.zbprotocol.AuthenticateUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.AuthenticateUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.AuthenticateUserResponse}
 */
proto.zbprotocol.AuthenticateUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.AuthenticateUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.AuthenticateUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.AuthenticateUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJwttoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.AuthenticateUserResponse} returns this
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jwtToken = 2;
 * @return {string}
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.getJwttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.AuthenticateUserResponse} returns this
 */
proto.zbprotocol.AuthenticateUserResponse.prototype.setJwttoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.NewSubIdentityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.NewSubIdentityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewSubIdentityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mobile: jspb.Message.getFieldWithDefault(msg, 4, ""),
    loginpassword: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pubkeyencoded: jspb.Message.getFieldWithDefault(msg, 6, ""),
    signupcode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.NewSubIdentityRequest}
 */
proto.zbprotocol.NewSubIdentityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.NewSubIdentityRequest;
  return proto.zbprotocol.NewSubIdentityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.NewSubIdentityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.NewSubIdentityRequest}
 */
proto.zbprotocol.NewSubIdentityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobile(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginpassword(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkeyencoded(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignupcode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.NewSubIdentityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.NewSubIdentityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewSubIdentityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMobile();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLoginpassword();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPubkeyencoded();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSignupcode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string mobile = 4;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getMobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setMobile = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string loginPassword = 5;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getLoginpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setLoginpassword = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string pubKeyEncoded = 6;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getPubkeyencoded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setPubkeyencoded = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string signupCode = 7;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getSignupcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setSignupcode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string groupId = 8;
 * @return {string}
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewSubIdentityRequest} returns this
 */
proto.zbprotocol.NewSubIdentityRequest.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.NewIdentityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.NewIdentityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.NewIdentityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mobile: jspb.Message.getFieldWithDefault(msg, 3, ""),
    adminpassword: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pubkeyencoded: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.NewIdentityRequest}
 */
proto.zbprotocol.NewIdentityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.NewIdentityRequest;
  return proto.zbprotocol.NewIdentityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.NewIdentityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.NewIdentityRequest}
 */
proto.zbprotocol.NewIdentityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobile(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminpassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkeyencoded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.NewIdentityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.NewIdentityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.NewIdentityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMobile();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAdminpassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPubkeyencoded();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.zbprotocol.NewIdentityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityRequest} returns this
 */
proto.zbprotocol.NewIdentityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.zbprotocol.NewIdentityRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityRequest} returns this
 */
proto.zbprotocol.NewIdentityRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mobile = 3;
 * @return {string}
 */
proto.zbprotocol.NewIdentityRequest.prototype.getMobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityRequest} returns this
 */
proto.zbprotocol.NewIdentityRequest.prototype.setMobile = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string adminPassword = 4;
 * @return {string}
 */
proto.zbprotocol.NewIdentityRequest.prototype.getAdminpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityRequest} returns this
 */
proto.zbprotocol.NewIdentityRequest.prototype.setAdminpassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string pubKeyEncoded = 5;
 * @return {string}
 */
proto.zbprotocol.NewIdentityRequest.prototype.getPubkeyencoded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityRequest} returns this
 */
proto.zbprotocol.NewIdentityRequest.prototype.setPubkeyencoded = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.SubIdentityModify.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.SubIdentityModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.SubIdentityModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SubIdentityModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    newemail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newmobile: jspb.Message.getFieldWithDefault(msg, 5, ""),
    newpassword: jspb.Message.getFieldWithDefault(msg, 6, ""),
    newpubkey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 8, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.SubIdentityModify}
 */
proto.zbprotocol.SubIdentityModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.SubIdentityModify;
  return proto.zbprotocol.SubIdentityModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.SubIdentityModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.SubIdentityModify}
 */
proto.zbprotocol.SubIdentityModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewemail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewmobile(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewpassword(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewpubkey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 9:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.SubIdentityModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.SubIdentityModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.SubIdentityModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SubIdentityModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNewemail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewmobile();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNewpassword();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNewpubkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subId = 2;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getSubid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setSubid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string newName = 3;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNewname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNewname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string newEmail = 4;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNewemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNewemail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string newMobile = 5;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNewmobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNewmobile = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string newPassword = 6;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNewpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNewpassword = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string newPubKey = 7;
 * @return {string}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNewpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNewpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 nonce = 8;
 * @return {number}
 */
proto.zbprotocol.SubIdentityModify.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional ProofOfCredential credential = 9;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.SubIdentityModify.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 9));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
*/
proto.zbprotocol.SubIdentityModify.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.SubIdentityModify} returns this
 */
proto.zbprotocol.SubIdentityModify.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.SubIdentityModify.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.SubIdentitiesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.SubIdentitiesList.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.SubIdentitiesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.SubIdentitiesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SubIdentitiesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    subidentitiesList: jspb.Message.toObjectList(msg.getSubidentitiesList(),
    proto.zbprotocol.NewSubIdentityRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.SubIdentitiesList}
 */
proto.zbprotocol.SubIdentitiesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.SubIdentitiesList;
  return proto.zbprotocol.SubIdentitiesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.SubIdentitiesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.SubIdentitiesList}
 */
proto.zbprotocol.SubIdentitiesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zbprotocol.NewSubIdentityRequest;
      reader.readMessage(value,proto.zbprotocol.NewSubIdentityRequest.deserializeBinaryFromReader);
      msg.addSubidentities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.SubIdentitiesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.SubIdentitiesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.SubIdentitiesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SubIdentitiesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubidentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.zbprotocol.NewSubIdentityRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NewSubIdentityRequest subIdentities = 1;
 * @return {!Array<!proto.zbprotocol.NewSubIdentityRequest>}
 */
proto.zbprotocol.SubIdentitiesList.prototype.getSubidentitiesList = function() {
  return /** @type{!Array<!proto.zbprotocol.NewSubIdentityRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.NewSubIdentityRequest, 1));
};


/**
 * @param {!Array<!proto.zbprotocol.NewSubIdentityRequest>} value
 * @return {!proto.zbprotocol.SubIdentitiesList} returns this
*/
proto.zbprotocol.SubIdentitiesList.prototype.setSubidentitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zbprotocol.NewSubIdentityRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.NewSubIdentityRequest}
 */
proto.zbprotocol.SubIdentitiesList.prototype.addSubidentities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zbprotocol.NewSubIdentityRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.SubIdentitiesList} returns this
 */
proto.zbprotocol.SubIdentitiesList.prototype.clearSubidentitiesList = function() {
  return this.setSubidentitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.NewIdentityConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.NewIdentityConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.NewIdentityConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    verificationcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.NewIdentityConfirm}
 */
proto.zbprotocol.NewIdentityConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.NewIdentityConfirm;
  return proto.zbprotocol.NewIdentityConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.NewIdentityConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.NewIdentityConfirm}
 */
proto.zbprotocol.NewIdentityConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.NewIdentityConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.NewIdentityConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.NewIdentityConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVerificationcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.NewIdentityConfirm.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityConfirm} returns this
 */
proto.zbprotocol.NewIdentityConfirm.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string parentId = 2;
 * @return {string}
 */
proto.zbprotocol.NewIdentityConfirm.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityConfirm} returns this
 */
proto.zbprotocol.NewIdentityConfirm.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string verificationCode = 3;
 * @return {string}
 */
proto.zbprotocol.NewIdentityConfirm.prototype.getVerificationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityConfirm} returns this
 */
proto.zbprotocol.NewIdentityConfirm.prototype.setVerificationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.NewIdentityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.NewIdentityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.NewIdentityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.zbprotocol.ZbError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.NewIdentityResponse}
 */
proto.zbprotocol.NewIdentityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.NewIdentityResponse;
  return proto.zbprotocol.NewIdentityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.NewIdentityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.NewIdentityResponse}
 */
proto.zbprotocol.NewIdentityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.zbprotocol.ZbError;
      reader.readMessage(value,proto.zbprotocol.ZbError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.NewIdentityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.NewIdentityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.NewIdentityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.NewIdentityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zbprotocol.ZbError.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.NewIdentityResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.NewIdentityResponse} returns this
 */
proto.zbprotocol.NewIdentityResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ZbError error = 2;
 * @return {?proto.zbprotocol.ZbError}
 */
proto.zbprotocol.NewIdentityResponse.prototype.getError = function() {
  return /** @type{?proto.zbprotocol.ZbError} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ZbError, 2));
};


/**
 * @param {?proto.zbprotocol.ZbError|undefined} value
 * @return {!proto.zbprotocol.NewIdentityResponse} returns this
*/
proto.zbprotocol.NewIdentityResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.NewIdentityResponse} returns this
 */
proto.zbprotocol.NewIdentityResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.NewIdentityResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableIndexField.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableIndexField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableIndexField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableIndexField.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ordering: jspb.Message.getFieldWithDefault(msg, 2, 0),
    languagecode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableIndexField}
 */
proto.zbprotocol.TableIndexField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableIndexField;
  return proto.zbprotocol.TableIndexField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableIndexField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableIndexField}
 */
proto.zbprotocol.TableIndexField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.zbprotocol.QueryOrdering} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableIndexField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableIndexField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableIndexField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableIndexField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.zbprotocol.TableIndexField.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableIndexField} returns this
 */
proto.zbprotocol.TableIndexField.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional QueryOrdering ordering = 2;
 * @return {!proto.zbprotocol.QueryOrdering}
 */
proto.zbprotocol.TableIndexField.prototype.getOrdering = function() {
  return /** @type {!proto.zbprotocol.QueryOrdering} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.zbprotocol.QueryOrdering} value
 * @return {!proto.zbprotocol.TableIndexField} returns this
 */
proto.zbprotocol.TableIndexField.prototype.setOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string languageCode = 3;
 * @return {string}
 */
proto.zbprotocol.TableIndexField.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableIndexField} returns this
 */
proto.zbprotocol.TableIndexField.prototype.setLanguagecode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.TableIndexFields.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableIndexFields.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableIndexFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableIndexFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableIndexFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.zbprotocol.TableIndexField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableIndexFields}
 */
proto.zbprotocol.TableIndexFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableIndexFields;
  return proto.zbprotocol.TableIndexFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableIndexFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableIndexFields}
 */
proto.zbprotocol.TableIndexFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zbprotocol.TableIndexField;
      reader.readMessage(value,proto.zbprotocol.TableIndexField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableIndexFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableIndexFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableIndexFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableIndexFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.zbprotocol.TableIndexField.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TableIndexField fields = 1;
 * @return {!Array<!proto.zbprotocol.TableIndexField>}
 */
proto.zbprotocol.TableIndexFields.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.zbprotocol.TableIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.TableIndexField, 1));
};


/**
 * @param {!Array<!proto.zbprotocol.TableIndexField>} value
 * @return {!proto.zbprotocol.TableIndexFields} returns this
*/
proto.zbprotocol.TableIndexFields.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zbprotocol.TableIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.TableIndexField}
 */
proto.zbprotocol.TableIndexFields.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zbprotocol.TableIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.TableIndexFields} returns this
 */
proto.zbprotocol.TableIndexFields.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.SimpleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.SimpleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.SimpleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SimpleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.SimpleRequest}
 */
proto.zbprotocol.SimpleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.SimpleRequest;
  return proto.zbprotocol.SimpleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.SimpleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.SimpleRequest}
 */
proto.zbprotocol.SimpleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.SimpleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.SimpleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.SimpleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.SimpleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.SimpleRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.SimpleRequest} returns this
 */
proto.zbprotocol.SimpleRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 nonce = 2;
 * @return {number}
 */
proto.zbprotocol.SimpleRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.SimpleRequest} returns this
 */
proto.zbprotocol.SimpleRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ProofOfCredential credential = 3;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.SimpleRequest.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 3));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.SimpleRequest} returns this
*/
proto.zbprotocol.SimpleRequest.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.SimpleRequest} returns this
 */
proto.zbprotocol.SimpleRequest.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.SimpleRequest.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ListTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ListTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ListTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ListTablesRequest}
 */
proto.zbprotocol.ListTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ListTablesRequest;
  return proto.zbprotocol.ListTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ListTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ListTablesRequest}
 */
proto.zbprotocol.ListTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 4:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ListTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ListTablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ListTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListTablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.ListTablesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListTablesRequest} returns this
 */
proto.zbprotocol.ListTablesRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableOwnerId = 2;
 * @return {string}
 */
proto.zbprotocol.ListTablesRequest.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListTablesRequest} returns this
 */
proto.zbprotocol.ListTablesRequest.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 nonce = 3;
 * @return {number}
 */
proto.zbprotocol.ListTablesRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.ListTablesRequest} returns this
 */
proto.zbprotocol.ListTablesRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ProofOfCredential credential = 4;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.ListTablesRequest.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 4));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.ListTablesRequest} returns this
*/
proto.zbprotocol.ListTablesRequest.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ListTablesRequest} returns this
 */
proto.zbprotocol.ListTablesRequest.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ListTablesRequest.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.ListTablesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ListTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ListTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ListTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.zbprotocol.ZbError.toObject(includeInstance, f),
    tabledefinitionsList: jspb.Message.toObjectList(msg.getTabledefinitionsList(),
    proto.zbprotocol.TableCreate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ListTablesResponse}
 */
proto.zbprotocol.ListTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ListTablesResponse;
  return proto.zbprotocol.ListTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ListTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ListTablesResponse}
 */
proto.zbprotocol.ListTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zbprotocol.ZbError;
      reader.readMessage(value,proto.zbprotocol.ZbError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.zbprotocol.TableCreate;
      reader.readMessage(value,proto.zbprotocol.TableCreate.deserializeBinaryFromReader);
      msg.addTabledefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ListTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ListTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ListTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListTablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zbprotocol.ZbError.serializeBinaryToWriter
    );
  }
  f = message.getTabledefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.zbprotocol.TableCreate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZbError error = 1;
 * @return {?proto.zbprotocol.ZbError}
 */
proto.zbprotocol.ListTablesResponse.prototype.getError = function() {
  return /** @type{?proto.zbprotocol.ZbError} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ZbError, 1));
};


/**
 * @param {?proto.zbprotocol.ZbError|undefined} value
 * @return {!proto.zbprotocol.ListTablesResponse} returns this
*/
proto.zbprotocol.ListTablesResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ListTablesResponse} returns this
 */
proto.zbprotocol.ListTablesResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ListTablesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TableCreate tableDefinitions = 2;
 * @return {!Array<!proto.zbprotocol.TableCreate>}
 */
proto.zbprotocol.ListTablesResponse.prototype.getTabledefinitionsList = function() {
  return /** @type{!Array<!proto.zbprotocol.TableCreate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.TableCreate, 2));
};


/**
 * @param {!Array<!proto.zbprotocol.TableCreate>} value
 * @return {!proto.zbprotocol.ListTablesResponse} returns this
*/
proto.zbprotocol.ListTablesResponse.prototype.setTabledefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.zbprotocol.TableCreate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.TableCreate}
 */
proto.zbprotocol.ListTablesResponse.prototype.addTabledefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.zbprotocol.TableCreate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.ListTablesResponse} returns this
 */
proto.zbprotocol.ListTablesResponse.prototype.clearTabledefinitionsList = function() {
  return this.setTabledefinitionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ListKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ListKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ListKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pattern: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pageindex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ListKeysRequest}
 */
proto.zbprotocol.ListKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ListKeysRequest;
  return proto.zbprotocol.ListKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ListKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ListKeysRequest}
 */
proto.zbprotocol.ListKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPageindex(value);
      break;
    case 7:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ListKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ListKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ListKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPageindex();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.ListKeysRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableId = 2;
 * @return {string}
 */
proto.zbprotocol.ListKeysRequest.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableOwnerId = 3;
 * @return {string}
 */
proto.zbprotocol.ListKeysRequest.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pattern = 4;
 * @return {string}
 */
proto.zbprotocol.ListKeysRequest.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 nonce = 5;
 * @return {number}
 */
proto.zbprotocol.ListKeysRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 pageIndex = 6;
 * @return {number}
 */
proto.zbprotocol.ListKeysRequest.prototype.getPageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.setPageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProofOfCredential credential = 7;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.ListKeysRequest.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 7));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
*/
proto.zbprotocol.ListKeysRequest.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ListKeysRequest} returns this
 */
proto.zbprotocol.ListKeysRequest.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ListKeysRequest.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.ListKeysResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.ListKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.ListKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.ListKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.zbprotocol.ZbError.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && proto.zbprotocol.PaginationInfo.toObject(includeInstance, f),
    keysList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.ListKeysResponse}
 */
proto.zbprotocol.ListKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.ListKeysResponse;
  return proto.zbprotocol.ListKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.ListKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.ListKeysResponse}
 */
proto.zbprotocol.ListKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zbprotocol.ZbError;
      reader.readMessage(value,proto.zbprotocol.ZbError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.zbprotocol.PaginationInfo;
      reader.readMessage(value,proto.zbprotocol.PaginationInfo.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.ListKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.ListKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.ListKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.ListKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zbprotocol.ZbError.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zbprotocol.PaginationInfo.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional ZbError error = 1;
 * @return {?proto.zbprotocol.ZbError}
 */
proto.zbprotocol.ListKeysResponse.prototype.getError = function() {
  return /** @type{?proto.zbprotocol.ZbError} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ZbError, 1));
};


/**
 * @param {?proto.zbprotocol.ZbError|undefined} value
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
*/
proto.zbprotocol.ListKeysResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
 */
proto.zbprotocol.ListKeysResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ListKeysResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PaginationInfo pagination = 2;
 * @return {?proto.zbprotocol.PaginationInfo}
 */
proto.zbprotocol.ListKeysResponse.prototype.getPagination = function() {
  return /** @type{?proto.zbprotocol.PaginationInfo} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.PaginationInfo, 2));
};


/**
 * @param {?proto.zbprotocol.PaginationInfo|undefined} value
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
*/
proto.zbprotocol.ListKeysResponse.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
 */
proto.zbprotocol.ListKeysResponse.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.ListKeysResponse.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string keys = 3;
 * @return {!Array<string>}
 */
proto.zbprotocol.ListKeysResponse.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
 */
proto.zbprotocol.ListKeysResponse.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
 */
proto.zbprotocol.ListKeysResponse.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.ListKeysResponse} returns this
 */
proto.zbprotocol.ListKeysResponse.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.TableCreate.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataformat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    indices: (f = msg.getIndices()) && proto.zbprotocol.TableIndexFields.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    allowtokenauth: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f),
    permissionsList: jspb.Message.toObjectList(msg.getPermissionsList(),
    proto.zbprotocol.PermissionsEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableCreate}
 */
proto.zbprotocol.TableCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableCreate;
  return proto.zbprotocol.TableCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableCreate}
 */
proto.zbprotocol.TableCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 3:
      var value = /** @type {!proto.zbprotocol.TableDataFormat} */ (reader.readEnum());
      msg.setDataformat(value);
      break;
    case 4:
      var value = new proto.zbprotocol.TableIndexFields;
      reader.readMessage(value,proto.zbprotocol.TableIndexFields.deserializeBinaryFromReader);
      msg.setIndices(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowtokenauth(value);
      break;
    case 7:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    case 8:
      var value = new proto.zbprotocol.PermissionsEntry;
      reader.readMessage(value,proto.zbprotocol.PermissionsEntry.deserializeBinaryFromReader);
      msg.addPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataformat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIndices();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zbprotocol.TableIndexFields.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAllowtokenauth();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
  f = message.getPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.zbprotocol.PermissionsEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.TableCreate.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableId = 2;
 * @return {string}
 */
proto.zbprotocol.TableCreate.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TableDataFormat dataFormat = 3;
 * @return {!proto.zbprotocol.TableDataFormat}
 */
proto.zbprotocol.TableCreate.prototype.getDataformat = function() {
  return /** @type {!proto.zbprotocol.TableDataFormat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.zbprotocol.TableDataFormat} value
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.setDataformat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional TableIndexFields indices = 4;
 * @return {?proto.zbprotocol.TableIndexFields}
 */
proto.zbprotocol.TableCreate.prototype.getIndices = function() {
  return /** @type{?proto.zbprotocol.TableIndexFields} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.TableIndexFields, 4));
};


/**
 * @param {?proto.zbprotocol.TableIndexFields|undefined} value
 * @return {!proto.zbprotocol.TableCreate} returns this
*/
proto.zbprotocol.TableCreate.prototype.setIndices = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.clearIndices = function() {
  return this.setIndices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableCreate.prototype.hasIndices = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 nonce = 5;
 * @return {number}
 */
proto.zbprotocol.TableCreate.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool allowTokenAuth = 6;
 * @return {boolean}
 */
proto.zbprotocol.TableCreate.prototype.getAllowtokenauth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.setAllowtokenauth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional ProofOfCredential credential = 7;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.TableCreate.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 7));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.TableCreate} returns this
*/
proto.zbprotocol.TableCreate.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableCreate.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated PermissionsEntry permissions = 8;
 * @return {!Array<!proto.zbprotocol.PermissionsEntry>}
 */
proto.zbprotocol.TableCreate.prototype.getPermissionsList = function() {
  return /** @type{!Array<!proto.zbprotocol.PermissionsEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.PermissionsEntry, 8));
};


/**
 * @param {!Array<!proto.zbprotocol.PermissionsEntry>} value
 * @return {!proto.zbprotocol.TableCreate} returns this
*/
proto.zbprotocol.TableCreate.prototype.setPermissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.zbprotocol.PermissionsEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.PermissionsEntry}
 */
proto.zbprotocol.TableCreate.prototype.addPermissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.zbprotocol.PermissionsEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.TableCreate} returns this
 */
proto.zbprotocol.TableCreate.prototype.clearPermissionsList = function() {
  return this.setPermissionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.TablePutMulti.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TablePutMulti.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TablePutMulti.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TablePutMulti} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TablePutMulti.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    overwrite: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f),
    pairsList: jspb.Message.toObjectList(msg.getPairsList(),
    proto.zbprotocol.DataPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TablePutMulti}
 */
proto.zbprotocol.TablePutMulti.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TablePutMulti;
  return proto.zbprotocol.TablePutMulti.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TablePutMulti} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TablePutMulti}
 */
proto.zbprotocol.TablePutMulti.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverwrite(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 6:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    case 7:
      var value = new proto.zbprotocol.DataPair;
      reader.readMessage(value,proto.zbprotocol.DataPair.deserializeBinaryFromReader);
      msg.addPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TablePutMulti.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TablePutMulti.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TablePutMulti} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TablePutMulti.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOverwrite();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
  f = message.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.zbprotocol.DataPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.TablePutMulti.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableOwnerId = 2;
 * @return {string}
 */
proto.zbprotocol.TablePutMulti.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableId = 3;
 * @return {string}
 */
proto.zbprotocol.TablePutMulti.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool overwrite = 4;
 * @return {boolean}
 */
proto.zbprotocol.TablePutMulti.prototype.getOverwrite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.setOverwrite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int64 nonce = 5;
 * @return {number}
 */
proto.zbprotocol.TablePutMulti.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ProofOfCredential credential = 6;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.TablePutMulti.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 6));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
*/
proto.zbprotocol.TablePutMulti.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TablePutMulti.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated DataPair pairs = 7;
 * @return {!Array<!proto.zbprotocol.DataPair>}
 */
proto.zbprotocol.TablePutMulti.prototype.getPairsList = function() {
  return /** @type{!Array<!proto.zbprotocol.DataPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.DataPair, 7));
};


/**
 * @param {!Array<!proto.zbprotocol.DataPair>} value
 * @return {!proto.zbprotocol.TablePutMulti} returns this
*/
proto.zbprotocol.TablePutMulti.prototype.setPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.zbprotocol.DataPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.DataPair}
 */
proto.zbprotocol.TablePutMulti.prototype.addPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.zbprotocol.DataPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.TablePutMulti} returns this
 */
proto.zbprotocol.TablePutMulti.prototype.clearPairsList = function() {
  return this.setPairsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TablePut.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TablePut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TablePut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TablePut.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    key: jspb.Message.getFieldWithDefault(msg, 4, ""),
    value: msg.getValue_asB64(),
    overwrite: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    nonce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TablePut}
 */
proto.zbprotocol.TablePut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TablePut;
  return proto.zbprotocol.TablePut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TablePut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TablePut}
 */
proto.zbprotocol.TablePut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverwrite(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 8:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TablePut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TablePut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TablePut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TablePut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getOverwrite();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableOwnerId = 2;
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableId = 3;
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string key = 4;
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes value = 5;
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes value = 5;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.zbprotocol.TablePut.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.zbprotocol.TablePut.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bool overwrite = 6;
 * @return {boolean}
 */
proto.zbprotocol.TablePut.prototype.getOverwrite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setOverwrite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 nonce = 7;
 * @return {number}
 */
proto.zbprotocol.TablePut.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional ProofOfCredential credential = 8;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.TablePut.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 8));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.TablePut} returns this
*/
proto.zbprotocol.TablePut.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TablePut} returns this
 */
proto.zbprotocol.TablePut.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TablePut.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.TableGet.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableGet.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f),
    pageindex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    keysList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableGet}
 */
proto.zbprotocol.TableGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableGet;
  return proto.zbprotocol.TableGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableGet}
 */
proto.zbprotocol.TableGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 5:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPageindex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
  f = message.getPageindex();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.TableGet.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableOwnerId = 2;
 * @return {string}
 */
proto.zbprotocol.TableGet.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableId = 3;
 * @return {string}
 */
proto.zbprotocol.TableGet.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 nonce = 4;
 * @return {number}
 */
proto.zbprotocol.TableGet.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ProofOfCredential credential = 5;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.TableGet.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 5));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.TableGet} returns this
*/
proto.zbprotocol.TableGet.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableGet.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 pageIndex = 6;
 * @return {number}
 */
proto.zbprotocol.TableGet.prototype.getPageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setPageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string keys = 7;
 * @return {!Array<string>}
 */
proto.zbprotocol.TableGet.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.TableGet} returns this
 */
proto.zbprotocol.TableGet.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.PaginationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.PaginationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.PaginationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PaginationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nextpageindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasnextpage: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.PaginationInfo}
 */
proto.zbprotocol.PaginationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.PaginationInfo;
  return proto.zbprotocol.PaginationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.PaginationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.PaginationInfo}
 */
proto.zbprotocol.PaginationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPageindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextpageindex(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasnextpage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.PaginationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.PaginationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.PaginationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.PaginationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageindex();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNextpageindex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHasnextpage();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 pageIndex = 1;
 * @return {number}
 */
proto.zbprotocol.PaginationInfo.prototype.getPageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.PaginationInfo} returns this
 */
proto.zbprotocol.PaginationInfo.prototype.setPageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 nextPageIndex = 2;
 * @return {number}
 */
proto.zbprotocol.PaginationInfo.prototype.getNextpageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.PaginationInfo} returns this
 */
proto.zbprotocol.PaginationInfo.prototype.setNextpageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool hasNextPage = 3;
 * @return {boolean}
 */
proto.zbprotocol.PaginationInfo.prototype.getHasnextpage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zbprotocol.PaginationInfo} returns this
 */
proto.zbprotocol.PaginationInfo.prototype.setHasnextpage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.DataPair.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.DataPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.DataPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.DataPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.DataPair}
 */
proto.zbprotocol.DataPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.DataPair;
  return proto.zbprotocol.DataPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.DataPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.DataPair}
 */
proto.zbprotocol.DataPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.DataPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.DataPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.DataPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.DataPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.zbprotocol.DataPair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.DataPair} returns this
 */
proto.zbprotocol.DataPair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.zbprotocol.DataPair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.zbprotocol.DataPair.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.zbprotocol.DataPair.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zbprotocol.DataPair} returns this
 */
proto.zbprotocol.DataPair.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbprotocol.TableGetResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.zbprotocol.ZbError.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && proto.zbprotocol.PaginationInfo.toObject(includeInstance, f),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.zbprotocol.DataPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableGetResponse}
 */
proto.zbprotocol.TableGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableGetResponse;
  return proto.zbprotocol.TableGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableGetResponse}
 */
proto.zbprotocol.TableGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zbprotocol.ZbError;
      reader.readMessage(value,proto.zbprotocol.ZbError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.zbprotocol.PaginationInfo;
      reader.readMessage(value,proto.zbprotocol.PaginationInfo.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 3:
      var value = new proto.zbprotocol.DataPair;
      reader.readMessage(value,proto.zbprotocol.DataPair.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zbprotocol.ZbError.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zbprotocol.PaginationInfo.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.zbprotocol.DataPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZbError error = 1;
 * @return {?proto.zbprotocol.ZbError}
 */
proto.zbprotocol.TableGetResponse.prototype.getError = function() {
  return /** @type{?proto.zbprotocol.ZbError} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ZbError, 1));
};


/**
 * @param {?proto.zbprotocol.ZbError|undefined} value
 * @return {!proto.zbprotocol.TableGetResponse} returns this
*/
proto.zbprotocol.TableGetResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableGetResponse} returns this
 */
proto.zbprotocol.TableGetResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableGetResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PaginationInfo pagination = 2;
 * @return {?proto.zbprotocol.PaginationInfo}
 */
proto.zbprotocol.TableGetResponse.prototype.getPagination = function() {
  return /** @type{?proto.zbprotocol.PaginationInfo} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.PaginationInfo, 2));
};


/**
 * @param {?proto.zbprotocol.PaginationInfo|undefined} value
 * @return {!proto.zbprotocol.TableGetResponse} returns this
*/
proto.zbprotocol.TableGetResponse.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableGetResponse} returns this
 */
proto.zbprotocol.TableGetResponse.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableGetResponse.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DataPair data = 3;
 * @return {!Array<!proto.zbprotocol.DataPair>}
 */
proto.zbprotocol.TableGetResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.zbprotocol.DataPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zbprotocol.DataPair, 3));
};


/**
 * @param {!Array<!proto.zbprotocol.DataPair>} value
 * @return {!proto.zbprotocol.TableGetResponse} returns this
*/
proto.zbprotocol.TableGetResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zbprotocol.DataPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zbprotocol.DataPair}
 */
proto.zbprotocol.TableGetResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zbprotocol.DataPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zbprotocol.TableGetResponse} returns this
 */
proto.zbprotocol.TableGetResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableSubqueryComparison.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableSubqueryComparison} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableSubqueryComparison.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    field: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ordering: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableSubqueryComparison}
 */
proto.zbprotocol.TableSubqueryComparison.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableSubqueryComparison;
  return proto.zbprotocol.TableSubqueryComparison.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableSubqueryComparison} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableSubqueryComparison}
 */
proto.zbprotocol.TableSubqueryComparison.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zbprotocol.QueryOperator} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!proto.zbprotocol.QueryOrdering} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableSubqueryComparison.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableSubqueryComparison} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableSubqueryComparison.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional QueryOperator op = 1;
 * @return {!proto.zbprotocol.QueryOperator}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.getOp = function() {
  return /** @type {!proto.zbprotocol.QueryOperator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zbprotocol.QueryOperator} value
 * @return {!proto.zbprotocol.TableSubqueryComparison} returns this
 */
proto.zbprotocol.TableSubqueryComparison.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string field = 2;
 * @return {string}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableSubqueryComparison} returns this
 */
proto.zbprotocol.TableSubqueryComparison.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableSubqueryComparison} returns this
 */
proto.zbprotocol.TableSubqueryComparison.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional QueryOrdering ordering = 4;
 * @return {!proto.zbprotocol.QueryOrdering}
 */
proto.zbprotocol.TableSubqueryComparison.prototype.getOrdering = function() {
  return /** @type {!proto.zbprotocol.QueryOrdering} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.zbprotocol.QueryOrdering} value
 * @return {!proto.zbprotocol.TableSubqueryComparison} returns this
 */
proto.zbprotocol.TableSubqueryComparison.prototype.setOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    query: (f = msg.getQuery()) && proto.zbprotocol.TableSubQuery.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pageindex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableQuery}
 */
proto.zbprotocol.TableQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableQuery;
  return proto.zbprotocol.TableQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableQuery}
 */
proto.zbprotocol.TableQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 4:
      var value = new proto.zbprotocol.TableSubQuery;
      reader.readMessage(value,proto.zbprotocol.TableSubQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPageindex(value);
      break;
    case 7:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zbprotocol.TableSubQuery.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPageindex();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.TableQuery.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableOwnerId = 2;
 * @return {string}
 */
proto.zbprotocol.TableQuery.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableId = 3;
 * @return {string}
 */
proto.zbprotocol.TableQuery.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TableSubQuery query = 4;
 * @return {?proto.zbprotocol.TableSubQuery}
 */
proto.zbprotocol.TableQuery.prototype.getQuery = function() {
  return /** @type{?proto.zbprotocol.TableSubQuery} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.TableSubQuery, 4));
};


/**
 * @param {?proto.zbprotocol.TableSubQuery|undefined} value
 * @return {!proto.zbprotocol.TableQuery} returns this
*/
proto.zbprotocol.TableQuery.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableQuery.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 nonce = 5;
 * @return {number}
 */
proto.zbprotocol.TableQuery.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 pageIndex = 6;
 * @return {number}
 */
proto.zbprotocol.TableQuery.prototype.getPageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.setPageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProofOfCredential credential = 7;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.TableQuery.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 7));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.TableQuery} returns this
*/
proto.zbprotocol.TableQuery.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableQuery} returns this
 */
proto.zbprotocol.TableQuery.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableQuery.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.TableSubQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.TableSubQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.TableSubQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableSubQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    iscompound: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    compoundoperator: jspb.Message.getFieldWithDefault(msg, 2, 0),
    compoundleft: (f = msg.getCompoundleft()) && proto.zbprotocol.TableSubQuery.toObject(includeInstance, f),
    compoundright: (f = msg.getCompoundright()) && proto.zbprotocol.TableSubQuery.toObject(includeInstance, f),
    comparison: (f = msg.getComparison()) && proto.zbprotocol.TableSubqueryComparison.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.TableSubQuery}
 */
proto.zbprotocol.TableSubQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.TableSubQuery;
  return proto.zbprotocol.TableSubQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.TableSubQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.TableSubQuery}
 */
proto.zbprotocol.TableSubQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompound(value);
      break;
    case 2:
      var value = /** @type {!proto.zbprotocol.QueryLogicalOperator} */ (reader.readEnum());
      msg.setCompoundoperator(value);
      break;
    case 3:
      var value = new proto.zbprotocol.TableSubQuery;
      reader.readMessage(value,proto.zbprotocol.TableSubQuery.deserializeBinaryFromReader);
      msg.setCompoundleft(value);
      break;
    case 4:
      var value = new proto.zbprotocol.TableSubQuery;
      reader.readMessage(value,proto.zbprotocol.TableSubQuery.deserializeBinaryFromReader);
      msg.setCompoundright(value);
      break;
    case 5:
      var value = new proto.zbprotocol.TableSubqueryComparison;
      reader.readMessage(value,proto.zbprotocol.TableSubqueryComparison.deserializeBinaryFromReader);
      msg.setComparison(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.TableSubQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.TableSubQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.TableSubQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.TableSubQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIscompound();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCompoundoperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCompoundleft();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.zbprotocol.TableSubQuery.serializeBinaryToWriter
    );
  }
  f = message.getCompoundright();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zbprotocol.TableSubQuery.serializeBinaryToWriter
    );
  }
  f = message.getComparison();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.zbprotocol.TableSubqueryComparison.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isCompound = 1;
 * @return {boolean}
 */
proto.zbprotocol.TableSubQuery.prototype.getIscompound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zbprotocol.TableSubQuery} returns this
 */
proto.zbprotocol.TableSubQuery.prototype.setIscompound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional QueryLogicalOperator compoundOperator = 2;
 * @return {!proto.zbprotocol.QueryLogicalOperator}
 */
proto.zbprotocol.TableSubQuery.prototype.getCompoundoperator = function() {
  return /** @type {!proto.zbprotocol.QueryLogicalOperator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.zbprotocol.QueryLogicalOperator} value
 * @return {!proto.zbprotocol.TableSubQuery} returns this
 */
proto.zbprotocol.TableSubQuery.prototype.setCompoundoperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TableSubQuery compoundLeft = 3;
 * @return {?proto.zbprotocol.TableSubQuery}
 */
proto.zbprotocol.TableSubQuery.prototype.getCompoundleft = function() {
  return /** @type{?proto.zbprotocol.TableSubQuery} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.TableSubQuery, 3));
};


/**
 * @param {?proto.zbprotocol.TableSubQuery|undefined} value
 * @return {!proto.zbprotocol.TableSubQuery} returns this
*/
proto.zbprotocol.TableSubQuery.prototype.setCompoundleft = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableSubQuery} returns this
 */
proto.zbprotocol.TableSubQuery.prototype.clearCompoundleft = function() {
  return this.setCompoundleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableSubQuery.prototype.hasCompoundleft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TableSubQuery compoundRight = 4;
 * @return {?proto.zbprotocol.TableSubQuery}
 */
proto.zbprotocol.TableSubQuery.prototype.getCompoundright = function() {
  return /** @type{?proto.zbprotocol.TableSubQuery} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.TableSubQuery, 4));
};


/**
 * @param {?proto.zbprotocol.TableSubQuery|undefined} value
 * @return {!proto.zbprotocol.TableSubQuery} returns this
*/
proto.zbprotocol.TableSubQuery.prototype.setCompoundright = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableSubQuery} returns this
 */
proto.zbprotocol.TableSubQuery.prototype.clearCompoundright = function() {
  return this.setCompoundright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableSubQuery.prototype.hasCompoundright = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TableSubqueryComparison comparison = 5;
 * @return {?proto.zbprotocol.TableSubqueryComparison}
 */
proto.zbprotocol.TableSubQuery.prototype.getComparison = function() {
  return /** @type{?proto.zbprotocol.TableSubqueryComparison} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.TableSubqueryComparison, 5));
};


/**
 * @param {?proto.zbprotocol.TableSubqueryComparison|undefined} value
 * @return {!proto.zbprotocol.TableSubQuery} returns this
*/
proto.zbprotocol.TableSubQuery.prototype.setComparison = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.TableSubQuery} returns this
 */
proto.zbprotocol.TableSubQuery.prototype.clearComparison = function() {
  return this.setComparison(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.TableSubQuery.prototype.hasComparison = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zbprotocol.DeleteSystemObjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbprotocol.DeleteSystemObjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.DeleteSystemObjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objecttype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tableownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    objectid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
    credential: (f = msg.getCredential()) && proto.zbprotocol.ProofOfCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest}
 */
proto.zbprotocol.DeleteSystemObjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbprotocol.DeleteSystemObjectRequest;
  return proto.zbprotocol.DeleteSystemObjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbprotocol.DeleteSystemObjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest}
 */
proto.zbprotocol.DeleteSystemObjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.zbprotocol.SystemObjectType} */ (reader.readEnum());
      msg.setObjecttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableownerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 7:
      var value = new proto.zbprotocol.ProofOfCredential;
      reader.readMessage(value,proto.zbprotocol.ProofOfCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbprotocol.DeleteSystemObjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbprotocol.DeleteSystemObjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbprotocol.DeleteSystemObjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjecttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTableownerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getObjectid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.zbprotocol.ProofOfCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SystemObjectType objectType = 2;
 * @return {!proto.zbprotocol.SystemObjectType}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getObjecttype = function() {
  return /** @type {!proto.zbprotocol.SystemObjectType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.zbprotocol.SystemObjectType} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setObjecttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string tableOwnerId = 3;
 * @return {string}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getTableownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setTableownerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tableId = 4;
 * @return {string}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string objectId = 5;
 * @return {string}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getObjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setObjectid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 nonce = 6;
 * @return {number}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ProofOfCredential credential = 7;
 * @return {?proto.zbprotocol.ProofOfCredential}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.getCredential = function() {
  return /** @type{?proto.zbprotocol.ProofOfCredential} */ (
    jspb.Message.getWrapperField(this, proto.zbprotocol.ProofOfCredential, 7));
};


/**
 * @param {?proto.zbprotocol.ProofOfCredential|undefined} value
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
*/
proto.zbprotocol.DeleteSystemObjectRequest.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zbprotocol.DeleteSystemObjectRequest} returns this
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbprotocol.DeleteSystemObjectRequest.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.zbprotocol.TableDataFormat = {
  BINARY: 0,
  PLAIN_TEXT: 1,
  JSON: 2
};

/**
 * @enum {number}
 */
proto.zbprotocol.PermissionConstraintType = {
  FIELD: 0
};

/**
 * @enum {number}
 */
proto.zbprotocol.FieldConstraintType = {
  EQUALS_VALUE: 0,
  SET_VALUE: 1
};

/**
 * @enum {number}
 */
proto.zbprotocol.FieldConstraintValueType = {
  CONSTANT: 0,
  UID: 1,
  TIMESTAMP: 2,
  NATURAL_ORDER: 3,
  RANDOM: 4
};

/**
 * @enum {number}
 */
proto.zbprotocol.PermissionAudienceType = {
  INDIVIDUAL: 0,
  USER: 1,
  PUBLIC: 2
};

/**
 * @enum {number}
 */
proto.zbprotocol.PermissionLevel = {
  NONE: 0,
  READ: 1,
  APPEND: 2,
  DELETE: 3,
  ADMINISTER: 4
};

/**
 * @enum {number}
 */
proto.zbprotocol.CredentialProofType = {
  SIGNATURE: 0,
  JWT_TOKEN: 1
};

/**
 * @enum {number}
 */
proto.zbprotocol.QueryOperator = {
  EQUALS: 0,
  GREATER_THAN: 1,
  LESS_THAN: 2,
  NOT_EQUALS: 3,
  GREATER_THAN_EQ: 4,
  LESS_THAN_EQ: 5,
  TEXT_SEARCH: 6
};

/**
 * @enum {number}
 */
proto.zbprotocol.QueryLogicalOperator = {
  LOGICAL_OR: 0,
  LOGICAL_AND: 1
};

/**
 * @enum {number}
 */
proto.zbprotocol.QueryOrdering = {
  LEXICOGRAPHIC: 0,
  REAL_NUMBERS: 1,
  INTEGRAL_NUMBERS: 2,
  FULL_TEXT: 3
};

/**
 * @enum {number}
 */
proto.zbprotocol.SystemObjectType = {
  SUBUSER: 0,
  TABLE: 1,
  KEY: 2
};

goog.object.extend(exports, proto.zbprotocol);
